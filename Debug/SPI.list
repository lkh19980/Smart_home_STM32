
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006d54  08006d54  00007d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e8c  08006e8c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006e8c  08006e8c  00007e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e94  08006e94  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e94  08006e94  00007e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e98  08006e98  00007e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006e9c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  08006f04  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08006f04  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012088  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282e  00000000  00000000  0001a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d46  00000000  00000000  0001da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2e  00000000  00000000  0001e796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b14  00000000  00000000  000376c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dda6  00000000  00000000  0004b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005124  00000000  00000000  000e8fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000ee0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d3c 	.word	0x08006d3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006d3c 	.word	0x08006d3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_SPI_TxRxCpltCallback>:
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
//	HAL_SPI_Transmit_IT(&hspi2, &TxData, 1);
//}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	//RxData = RxData + 7;
//	snprintf(uart_buf, sizeof(uart_buf), "get_data : %x, send_data : %x \n\r", RxData, TxData);
//	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
	HAL_SPI_TransmitReceive_IT(&hspi2, &TxData, &RxData,1);
 8000588:	2301      	movs	r3, #1
 800058a:	4a0f      	ldr	r2, [pc, #60]	@ (80005c8 <HAL_SPI_TxRxCpltCallback+0x48>)
 800058c:	490f      	ldr	r1, [pc, #60]	@ (80005cc <HAL_SPI_TxRxCpltCallback+0x4c>)
 800058e:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <HAL_SPI_TxRxCpltCallback+0x50>)
 8000590:	f002 fe08 	bl	80031a4 <HAL_SPI_TransmitReceive_IT>
	dr = (RxData >> 4);
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_SPI_TxRxCpltCallback+0x48>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <HAL_SPI_TxRxCpltCallback+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR2 = dr * 10; // dr : 0 ~ 9,  10 ~ 19
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_SPI_TxRxCpltCallback+0x54>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <HAL_SPI_TxRxCpltCallback+0x58>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	639a      	str	r2, [r3, #56]	@ 0x38
	FAN_motor();
 80005b6:	f000 f8ad 	bl	8000714 <FAN_motor>
	Screen();
 80005ba:	f000 f8c7 	bl	800074c <Screen>
//	TxData++;
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200002a9 	.word	0x200002a9
 80005cc:	200002a8 	.word	0x200002a8
 80005d0:	200000cc 	.word	0x200000cc
 80005d4:	200002a4 	.word	0x200002a4
 80005d8:	2000017c 	.word	0x2000017c

080005dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b3a      	ldr	r3, [pc, #232]	@ (80006d4 <HAL_ADC_ConvCpltCallback+0xf8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d16c      	bne.n	80006ca <HAL_ADC_ConvCpltCallback+0xee>

		Val = HAL_ADC_GetValue(&hadc1);
 80005f0:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <HAL_ADC_ConvCpltCallback+0xf8>)
 80005f2:	f001 fadd 	bl	8001bb0 <HAL_ADC_GetValue>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <HAL_ADC_ConvCpltCallback+0xfc>)
 80005fc:	801a      	strh	r2, [r3, #0]
		if(idx == 0)
 80005fe:	4b37      	ldr	r3, [pc, #220]	@ (80006dc <HAL_ADC_ConvCpltCallback+0x100>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d104      	bne.n	8000610 <HAL_ADC_ConvCpltCallback+0x34>
		{
			adcVal[0] = Val;
 8000606:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000608:	881a      	ldrh	r2, [r3, #0]
 800060a:	4b35      	ldr	r3, [pc, #212]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 800060c:	801a      	strh	r2, [r3, #0]
 800060e:	e003      	b.n	8000618 <HAL_ADC_ConvCpltCallback+0x3c>
		}
		else
		{
			adcVal[1] = Val;
 8000610:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000616:	805a      	strh	r2, [r3, #2]
		}
		gas = (adcVal[0] > 3600) ? 7 : (adcVal[0] < 1200) ? 0 :(((adcVal[0] - 400) / 400) - 1);
 8000618:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000620:	d814      	bhi.n	800064c <HAL_ADC_ConvCpltCallback+0x70>
 8000622:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800062a:	d30d      	bcc.n	8000648 <HAL_ADC_ConvCpltCallback+0x6c>
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000634:	4a2b      	ldr	r2, [pc, #172]	@ (80006e4 <HAL_ADC_ConvCpltCallback+0x108>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	11d2      	asrs	r2, r2, #7
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	3b01      	subs	r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	e002      	b.n	800064e <HAL_ADC_ConvCpltCallback+0x72>
 8000648:	2300      	movs	r3, #0
 800064a:	e000      	b.n	800064e <HAL_ADC_ConvCpltCallback+0x72>
 800064c:	2307      	movs	r3, #7
 800064e:	4a26      	ldr	r2, [pc, #152]	@ (80006e8 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000650:	7013      	strb	r3, [r2, #0]
		light = (adcVal[1] > 3000) ? 0 : (adcVal[1] > 1500) ? (15 - (((adcVal[1] - 1500) / 100))) : 15;
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000654:	885b      	ldrh	r3, [r3, #2]
 8000656:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800065a:	4293      	cmp	r3, r2
 800065c:	d815      	bhi.n	800068a <HAL_ADC_ConvCpltCallback+0xae>
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000660:	885b      	ldrh	r3, [r3, #2]
 8000662:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000666:	4293      	cmp	r3, r2
 8000668:	d90d      	bls.n	8000686 <HAL_ADC_ConvCpltCallback+0xaa>
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <HAL_ADC_ConvCpltCallback+0x104>)
 800066c:	885b      	ldrh	r3, [r3, #2]
 800066e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <HAL_ADC_ConvCpltCallback+0x108>)
 8000674:	fb82 1203 	smull	r1, r2, r2, r3
 8000678:	1152      	asrs	r2, r2, #5
 800067a:	17db      	asrs	r3, r3, #31
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	b2db      	uxtb	r3, r3
 8000680:	330f      	adds	r3, #15
 8000682:	b2db      	uxtb	r3, r3
 8000684:	e002      	b.n	800068c <HAL_ADC_ConvCpltCallback+0xb0>
 8000686:	230f      	movs	r3, #15
 8000688:	e000      	b.n	800068c <HAL_ADC_ConvCpltCallback+0xb0>
 800068a:	2300      	movs	r3, #0
 800068c:	4a17      	ldr	r2, [pc, #92]	@ (80006ec <HAL_ADC_ConvCpltCallback+0x110>)
 800068e:	7013      	strb	r3, [r2, #0]
		TxData =  (light << 4) + (gas << 1) + val;
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <HAL_ADC_ConvCpltCallback+0x110>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <HAL_ADC_ConvCpltCallback+0x10c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <HAL_ADC_ConvCpltCallback+0x114>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <HAL_ADC_ConvCpltCallback+0x118>)
 80006b0:	701a      	strb	r2, [r3, #0]

		if(++idx == 2) idx = 0;
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_ADC_ConvCpltCallback+0x100>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_ADC_ConvCpltCallback+0x100>)
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <HAL_ADC_ConvCpltCallback+0x100>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d102      	bne.n	80006ca <HAL_ADC_ConvCpltCallback+0xee>
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_ADC_ConvCpltCallback+0x100>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
	}
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000084 	.word	0x20000084
 80006d8:	20000294 	.word	0x20000294
 80006dc:	200002a0 	.word	0x200002a0
 80006e0:	20000290 	.word	0x20000290
 80006e4:	51eb851f 	.word	0x51eb851f
 80006e8:	200002aa 	.word	0x200002aa
 80006ec:	200002ab 	.word	0x200002ab
 80006f0:	20000298 	.word	0x20000298
 80006f4:	200002a8 	.word	0x200002a8

080006f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000702:	f001 f887 	bl	8001814 <HAL_ADC_Start_IT>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000084 	.word	0x20000084

08000714 <FAN_motor>:
//		HAL_UART_Transmit_IT(&huart2, (uint8_t *)uart_buf2, strlen(uart_buf2));
//	}
//}

void FAN_motor()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	if((RxData & 0b00000001))
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <FAN_motor+0x30>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <FAN_motor+0x1e>
	{
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <FAN_motor+0x34>)
 800072c:	f001 ffda 	bl	80026e4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 0);
	}
}
 8000730:	e005      	b.n	800073e <FAN_motor+0x2a>
		HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <FAN_motor+0x34>)
 800073a:	f001 ffd3 	bl	80026e4 <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200002a9 	.word	0x200002a9
 8000748:	40020000 	.word	0x40020000

0800074c <Screen>:

void Screen()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if((RxData & 0b00000010))
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <Screen+0x2c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d005      	beq.n	8000768 <Screen+0x1c>
	{
		HAL_GPIO_WritePin(SCREEN_GPIO_Port, SCREEN_Pin , 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <Screen+0x30>)
 8000762:	f001 ffbf 	bl	80026e4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(SCREEN_GPIO_Port, SCREEN_Pin , 0);
	}
}
 8000766:	e004      	b.n	8000772 <Screen+0x26>
		HAL_GPIO_WritePin(SCREEN_GPIO_Port, SCREEN_Pin , 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <Screen+0x30>)
 800076e:	f001 ffb9 	bl	80026e4 <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002a9 	.word	0x200002a9
 800077c:	40020800 	.word	0x40020800

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 ff6b 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f8d9 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 fb09 	bl	8000da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000792:	f000 fadd 	bl	8000d50 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000796:	f000 f9a1 	bl	8000adc <MX_SPI2_Init>
  MX_SPI3_Init();
 800079a:	f000 f9d1 	bl	8000b40 <MX_SPI3_Init>
  MX_ADC1_Init();
 800079e:	f000 f939 	bl	8000a14 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007a2:	f000 fa87 	bl	8000cb4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80007a6:	f000 fa01 	bl	8000bac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  char test_data[50] = "1234567";
 80007aa:	4a4f      	ldr	r2, [pc, #316]	@ (80008e8 <main+0x168>)
 80007ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007b0:	6810      	ldr	r0, [r2, #0]
 80007b2:	6851      	ldr	r1, [r2, #4]
 80007b4:	c303      	stmia	r3!, {r0, r1}
 80007b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80007ba:	222a      	movs	r2, #42	@ 0x2a
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fb82 	bl	8005ec8 <memset>
  char get_data[50];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ProgramStart("SPI");
 80007c4:	4849      	ldr	r0, [pc, #292]	@ (80008ec <main+0x16c>)
 80007c6:	f000 fbd5 	bl	8000f74 <ProgramStart>
  //HAL_SPI_Receive_IT(&hspi2, &RxData, 1);
//  HAL_SPI_Transmit_IT(&hspi2, &TxData, 1);
  HAL_SPI_TransmitReceive_IT(&hspi2, &TxData, &RxData,1);
 80007ca:	2301      	movs	r3, #1
 80007cc:	4a48      	ldr	r2, [pc, #288]	@ (80008f0 <main+0x170>)
 80007ce:	4949      	ldr	r1, [pc, #292]	@ (80008f4 <main+0x174>)
 80007d0:	4849      	ldr	r0, [pc, #292]	@ (80008f8 <main+0x178>)
 80007d2:	f002 fce7 	bl	80031a4 <HAL_SPI_TransmitReceive_IT>
//  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 0);
  HAL_TIM_Base_Start_IT(&htim3);
 80007d6:	4849      	ldr	r0, [pc, #292]	@ (80008fc <main+0x17c>)
 80007d8:	f003 f8f0 	bl	80039bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	4848      	ldr	r0, [pc, #288]	@ (8000900 <main+0x180>)
 80007e0:	f003 f99e 	bl	8003b20 <HAL_TIM_PWM_Start>
	  //HAL_SPI_Transmit(&hspi3, &TxData, 1,10);
//	  dr = (RxData >> 4);
//	  htim1.Instance->CCR2 = dr + 10; // dr : 0 ~ 9,  10 ~ 19
//	  int sa = dr * 18; //Servo Angle

	  val = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 80007e4:	2120      	movs	r1, #32
 80007e6:	4847      	ldr	r0, [pc, #284]	@ (8000904 <main+0x184>)
 80007e8:	f001 ff64 	bl	80026b4 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b45      	ldr	r3, [pc, #276]	@ (8000908 <main+0x188>)
 80007f2:	601a      	str	r2, [r3, #0]
	  led_val = HAL_GPIO_ReadPin(SCREEN_GPIO_Port, SCREEN_Pin);
 80007f4:	2101      	movs	r1, #1
 80007f6:	4845      	ldr	r0, [pc, #276]	@ (800090c <main+0x18c>)
 80007f8:	f001 ff5c 	bl	80026b4 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b43      	ldr	r3, [pc, #268]	@ (8000910 <main+0x190>)
 8000802:	601a      	str	r2, [r3, #0]
	  if (cnt++ >= 10)
 8000804:	4b43      	ldr	r3, [pc, #268]	@ (8000914 <main+0x194>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4942      	ldr	r1, [pc, #264]	@ (8000914 <main+0x194>)
 800080c:	600a      	str	r2, [r1, #0]
 800080e:	2b09      	cmp	r3, #9
 8000810:	dd66      	ble.n	80008e0 <main+0x160>
	  {
		  snprintf(uart_buf, sizeof(uart_buf), "get_data : %02x, send_data : %02x \n\r", RxData, TxData);
 8000812:	4b37      	ldr	r3, [pc, #220]	@ (80008f0 <main+0x170>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <main+0x174>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	4613      	mov	r3, r2
 8000820:	4a3d      	ldr	r2, [pc, #244]	@ (8000918 <main+0x198>)
 8000822:	213c      	movs	r1, #60	@ 0x3c
 8000824:	483d      	ldr	r0, [pc, #244]	@ (800091c <main+0x19c>)
 8000826:	f005 fa43 	bl	8005cb0 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
 800082a:	483c      	ldr	r0, [pc, #240]	@ (800091c <main+0x19c>)
 800082c:	f7ff fcd8 	bl	80001e0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000838:	4938      	ldr	r1, [pc, #224]	@ (800091c <main+0x19c>)
 800083a:	4839      	ldr	r0, [pc, #228]	@ (8000920 <main+0x1a0>)
 800083c:	f004 f8be 	bl	80049bc <HAL_UART_Transmit>
		  snprintf(uart_buf, sizeof(uart_buf), "Light : %d,  Gas : %01x,  PIR : %01x \n\r", light, gas, val);
 8000840:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <main+0x1a4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	4b38      	ldr	r3, [pc, #224]	@ (8000928 <main+0x1a8>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <main+0x188>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	9200      	str	r2, [sp, #0]
 8000854:	460b      	mov	r3, r1
 8000856:	4a35      	ldr	r2, [pc, #212]	@ (800092c <main+0x1ac>)
 8000858:	213c      	movs	r1, #60	@ 0x3c
 800085a:	4830      	ldr	r0, [pc, #192]	@ (800091c <main+0x19c>)
 800085c:	f005 fa28 	bl	8005cb0 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
 8000860:	482e      	ldr	r0, [pc, #184]	@ (800091c <main+0x19c>)
 8000862:	f7ff fcbd 	bl	80001e0 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800086e:	492b      	ldr	r1, [pc, #172]	@ (800091c <main+0x19c>)
 8000870:	482b      	ldr	r0, [pc, #172]	@ (8000920 <main+0x1a0>)
 8000872:	f004 f8a3 	bl	80049bc <HAL_UART_Transmit>
		  snprintf(uart_buf, sizeof(uart_buf), "Light Detected : %d  Gas Detected : %d,\n\r", adcVal[1], adcVal[0]);
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <main+0x1b0>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	461a      	mov	r2, r3
 800087c:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <main+0x1b0>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4613      	mov	r3, r2
 8000884:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <main+0x1b4>)
 8000886:	213c      	movs	r1, #60	@ 0x3c
 8000888:	4824      	ldr	r0, [pc, #144]	@ (800091c <main+0x19c>)
 800088a:	f005 fa11 	bl	8005cb0 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
 800088e:	4823      	ldr	r0, [pc, #140]	@ (800091c <main+0x19c>)
 8000890:	f7ff fca6 	bl	80001e0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089c:	491f      	ldr	r1, [pc, #124]	@ (800091c <main+0x19c>)
 800089e:	4820      	ldr	r0, [pc, #128]	@ (8000920 <main+0x1a0>)
 80008a0:	f004 f88c 	bl	80049bc <HAL_UART_Transmit>
		  snprintf(uart_buf, sizeof(uart_buf), "LED : %d, Fan : %d, SCREEN : %d\n\r",dr , (RxData & 0b00000001), led_val);
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <main+0x1b8>)
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <main+0x170>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <main+0x190>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	460b      	mov	r3, r1
 80008ba:	4a20      	ldr	r2, [pc, #128]	@ (800093c <main+0x1bc>)
 80008bc:	213c      	movs	r1, #60	@ 0x3c
 80008be:	4817      	ldr	r0, [pc, #92]	@ (800091c <main+0x19c>)
 80008c0:	f005 f9f6 	bl	8005cb0 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, strlen(uart_buf), 1000);
 80008c4:	4815      	ldr	r0, [pc, #84]	@ (800091c <main+0x19c>)
 80008c6:	f7ff fc8b 	bl	80001e0 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	4912      	ldr	r1, [pc, #72]	@ (800091c <main+0x19c>)
 80008d4:	4812      	ldr	r0, [pc, #72]	@ (8000920 <main+0x1a0>)
 80008d6:	f004 f871 	bl	80049bc <HAL_UART_Transmit>
		  cnt = 0;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <main+0x194>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]


//	  FAN_motor();
//	  PIR_sensor();
//	  Screen();
	  HAL_Delay(100);
 80008e0:	2064      	movs	r0, #100	@ 0x64
 80008e2:	f000 ff2f 	bl	8001744 <HAL_Delay>
	  val = HAL_GPIO_ReadPin(PIR_GPIO_Port, PIR_Pin);
 80008e6:	e77d      	b.n	80007e4 <main+0x64>
 80008e8:	08006df8 	.word	0x08006df8
 80008ec:	08006d54 	.word	0x08006d54
 80008f0:	200002a9 	.word	0x200002a9
 80008f4:	200002a8 	.word	0x200002a8
 80008f8:	200000cc 	.word	0x200000cc
 80008fc:	200001c4 	.word	0x200001c4
 8000900:	2000017c 	.word	0x2000017c
 8000904:	40020400 	.word	0x40020400
 8000908:	20000298 	.word	0x20000298
 800090c:	40020800 	.word	0x40020800
 8000910:	2000029c 	.word	0x2000029c
 8000914:	200002ac 	.word	0x200002ac
 8000918:	08006d58 	.word	0x08006d58
 800091c:	20000254 	.word	0x20000254
 8000920:	2000020c 	.word	0x2000020c
 8000924:	200002ab 	.word	0x200002ab
 8000928:	200002aa 	.word	0x200002aa
 800092c:	08006d80 	.word	0x08006d80
 8000930:	20000290 	.word	0x20000290
 8000934:	08006da8 	.word	0x08006da8
 8000938:	200002a4 	.word	0x200002a4
 800093c:	08006dd4 	.word	0x08006dd4

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f005 faba 	bl	8005ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a27      	ldr	r2, [pc, #156]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <SystemClock_Config+0xd0>)
 800098a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 feca 	bl	8002760 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d2:	f000 fa81 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2102      	movs	r1, #2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 f92c 	bl	8002c50 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009fe:	f000 fa6b 	bl	8000ed8 <Error_Handler>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad4 <MX_ADC1_Init+0xc0>)
 8000a2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000a46:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <MX_ADC1_Init+0xc4>)
 8000a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7a:	4815      	ldr	r0, [pc, #84]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a7c:	f000 fe86 	bl	800178c <HAL_ADC_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8000a86:	f000 fa27 	bl	8000ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000a9c:	f001 f8aa 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000aa6:	f000 fa17 	bl	8000ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_ADC1_Init+0xbc>)
 8000ab8:	f001 f89c 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ac2:	f000 fa09 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000084 	.word	0x20000084
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	0f000001 	.word	0x0f000001

08000adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <MX_SPI2_Init+0x60>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b1e:	220a      	movs	r2, #10
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_SPI2_Init+0x5c>)
 8000b24:	f002 fab4 	bl	8003090 <HAL_SPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000b2e:	f000 f9d3 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000cc 	.word	0x200000cc
 8000b3c:	40003800 	.word	0x40003800

08000b40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b46:	4a18      	ldr	r2, [pc, #96]	@ (8000ba8 <MX_SPI3_Init+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b74:	2210      	movs	r2, #16
 8000b76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_SPI3_Init+0x64>)
 8000b92:	f002 fa7d 	bl	8003090 <HAL_SPI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b9c:	f000 f99c 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000124 	.word	0x20000124
 8000ba8:	40003c00 	.word	0x40003c00

08000bac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b092      	sub	sp, #72	@ 0x48
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f005 f976 	bl	8005ec8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bdc:	4b33      	ldr	r3, [pc, #204]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000bde:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <MX_TIM1_Init+0x104>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000be2:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000be4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000be8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = (10000/50)-1;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000bf2:	22c7      	movs	r2, #199	@ 0xc7
 8000bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c08:	4828      	ldr	r0, [pc, #160]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c0a:	f002 ff39 	bl	8003a80 <HAL_TIM_PWM_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c14:	f000 f960 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c24:	4619      	mov	r1, r3
 8000c26:	4821      	ldr	r0, [pc, #132]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c28:	f003 fda4 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c32:	f000 f951 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c36:	2360      	movs	r3, #96	@ 0x60
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c56:	2204      	movs	r2, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4814      	ldr	r0, [pc, #80]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c5c:	f003 f900 	bl	8003e60 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000c66:	f000 f937 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c8e:	f003 fddf 	bl	8004850 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c98:	f000 f91e 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c9c:	4803      	ldr	r0, [pc, #12]	@ (8000cac <MX_TIM1_Init+0x100>)
 8000c9e:	f000 fb0b 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3748      	adds	r7, #72	@ 0x48
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000017c 	.word	0x2000017c
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <MX_TIM3_Init+0x98>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cd8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000ce6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000cea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cf8:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000cfa:	f002 fe0f 	bl	800391c <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d04:	f000 f8e8 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000d16:	f003 f965 	bl	8003fe4 <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d20:	f000 f8da 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_TIM3_Init+0x94>)
 8000d32:	f003 fd1f 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f000 f8cc 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001c4 	.word	0x200001c4
 8000d4c:	40000400 	.word	0x40000400

08000d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART2_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART2_UART_Init+0x4c>)
 8000d88:	f003 fdc8 	bl	800491c <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 f8a1 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000020c 	.word	0x2000020c
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b42      	ldr	r3, [pc, #264]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a41      	ldr	r2, [pc, #260]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b38      	ldr	r3, [pc, #224]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a33      	ldr	r2, [pc, #204]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <MX_GPIO_Init+0x124>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCREEN_GPIO_Port, SCREEN_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4827      	ldr	r0, [pc, #156]	@ (8000ecc <MX_GPIO_Init+0x128>)
 8000e30:	f001 fc58 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|FAN_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000e3a:	4825      	ldr	r0, [pc, #148]	@ (8000ed0 <MX_GPIO_Init+0x12c>)
 8000e3c:	f001 fc52 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	481d      	ldr	r0, [pc, #116]	@ (8000ecc <MX_GPIO_Init+0x128>)
 8000e58:	f001 faa8 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SCREEN_Pin */
  GPIO_InitStruct.Pin = SCREEN_Pin;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SCREEN_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4816      	ldr	r0, [pc, #88]	@ (8000ecc <MX_GPIO_Init+0x128>)
 8000e74:	f001 fa9a 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin FAN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|FAN_Pin;
 8000e78:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480f      	ldr	r0, [pc, #60]	@ (8000ed0 <MX_GPIO_Init+0x12c>)
 8000e92:	f001 fa8b 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 8000e96:	2320      	movs	r3, #32
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <MX_GPIO_Init+0x130>)
 8000eaa:	f001 fa7f 	bl	80023ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2028      	movs	r0, #40	@ 0x28
 8000eb4:	f001 f9b1 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb8:	2028      	movs	r0, #40	@ 0x28
 8000eba:	f001 f9ca 	bl	8002252 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	@ 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <Error_Handler+0x8>

08000ee4 <__io_putchar>:

extern UART_HandleTypeDef huart2;
extern

int __io_putchar(int ch)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 10);
 8000eec:	1d39      	adds	r1, r7, #4
 8000eee:	230a      	movs	r3, #10
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <__io_putchar+0x20>)
 8000ef4:	f003 fd62 	bl	80049bc <HAL_UART_Transmit>
	return ch;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000020c 	.word	0x2000020c

08000f08 <__io_getchar>:

int __io_getchar(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	char ch;
	while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000f0e:	bf00      	nop
 8000f10:	1df9      	adds	r1, r7, #7
 8000f12:	230a      	movs	r3, #10
 8000f14:	2201      	movs	r2, #1
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <__io_getchar+0x44>)
 8000f18:	f003 fddb 	bl	8004ad2 <HAL_UART_Receive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f6      	bne.n	8000f10 <__io_getchar+0x8>
	HAL_UART_Transmit(&huart2, &ch, 1, 10);	// echo
 8000f22:	1df9      	adds	r1, r7, #7
 8000f24:	230a      	movs	r3, #10
 8000f26:	2201      	movs	r2, #1
 8000f28:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <__io_getchar+0x44>)
 8000f2a:	f003 fd47 	bl	80049bc <HAL_UART_Transmit>
	if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b0d      	cmp	r3, #13
 8000f32:	d105      	bne.n	8000f40 <__io_getchar+0x38>
 8000f34:	230a      	movs	r3, #10
 8000f36:	2201      	movs	r2, #1
 8000f38:	4905      	ldr	r1, [pc, #20]	@ (8000f50 <__io_getchar+0x48>)
 8000f3a:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <__io_getchar+0x44>)
 8000f3c:	f003 fd3e 	bl	80049bc <HAL_UART_Transmit>
	return ch;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000020c 	.word	0x2000020c
 8000f50:	08006e00 	.word	0x08006e00

08000f54 <Wait>:

void Wait()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000f58:	bf00      	nop
 8000f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5e:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <Wait+0x1c>)
 8000f60:	f001 fba8 	bl	80026b4 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f7      	bne.n	8000f5a <Wait+0x6>
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020800 	.word	0x40020800

08000f74 <ProgramStart>:

void ProgramStart(char *name)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	printf("\033[2J\033[1;1H\n"); // [y;xH : move cur to (x,y) 2J: 화면 클리어
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <ProgramStart+0x24>)
 8000f7e:	f004 fe8f 	bl	8005ca0 <puts>
	printf("Program(%s) started... Blue button to start\r\n", name);
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <ProgramStart+0x28>)
 8000f86:	f004 fe23 	bl	8005bd0 <iprintf>
	Wait(); //while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != 0);
 8000f8a:	f7ff ffe3 	bl	8000f54 <Wait>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08006e04 	.word	0x08006e04
 8000f9c:	08006e10 	.word	0x08006e10

08000fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f001 f910 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1b      	ldr	r2, [pc, #108]	@ (800107c <HAL_ADC_MspInit+0x8c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12f      	bne.n	8001072 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001020:	6453      	str	r3, [r2, #68]	@ 0x44
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_ADC_MspInit+0x90>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Gas_sensor_Pin|Light_sensor_Pin;
 800104a:	2303      	movs	r3, #3
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <HAL_ADC_MspInit+0x94>)
 800105e:	f001 f9a5 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2012      	movs	r0, #18
 8001068:	f001 f8d7 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800106c:	2012      	movs	r0, #18
 800106e:	f001 f8f0 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40012000 	.word	0x40012000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a59      	ldr	r2, [pc, #356]	@ (800120c <HAL_SPI_MspInit+0x184>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d153      	bne.n	8001152 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	4b58      	ldr	r3, [pc, #352]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a57      	ldr	r2, [pc, #348]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b55      	ldr	r3, [pc, #340]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	4b51      	ldr	r3, [pc, #324]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a50      	ldr	r2, [pc, #320]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a49      	ldr	r2, [pc, #292]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b47      	ldr	r3, [pc, #284]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800110e:	2305      	movs	r3, #5
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	483e      	ldr	r0, [pc, #248]	@ (8001214 <HAL_SPI_MspInit+0x18c>)
 800111a:	f001 f947 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800111e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001130:	2305      	movs	r3, #5
 8001132:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4837      	ldr	r0, [pc, #220]	@ (8001218 <HAL_SPI_MspInit+0x190>)
 800113c:	f001 f936 	bl	80023ac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2024      	movs	r0, #36	@ 0x24
 8001146:	f001 f868 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800114a:	2024      	movs	r0, #36	@ 0x24
 800114c:	f001 f881 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001150:	e057      	b.n	8001202 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a31      	ldr	r2, [pc, #196]	@ (800121c <HAL_SPI_MspInit+0x194>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d152      	bne.n	8001202 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a2a      	ldr	r2, [pc, #168]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	@ 0x30
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <HAL_SPI_MspInit+0x188>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b0:	2310      	movs	r3, #16
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c0:	2306      	movs	r3, #6
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4815      	ldr	r0, [pc, #84]	@ (8001220 <HAL_SPI_MspInit+0x198>)
 80011cc:	f001 f8ee 	bl	80023ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e2:	2306      	movs	r3, #6
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4809      	ldr	r0, [pc, #36]	@ (8001214 <HAL_SPI_MspInit+0x18c>)
 80011ee:	f001 f8dd 	bl	80023ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2033      	movs	r0, #51	@ 0x33
 80011f8:	f001 f80f 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011fc:	2033      	movs	r0, #51	@ 0x33
 80011fe:	f001 f828 	bl	8002252 <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	@ 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40003800 	.word	0x40003800
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020400 	.word	0x40020400
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40020000 	.word	0x40020000

08001224 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0b      	ldr	r2, [pc, #44]	@ (8001260 <HAL_TIM_PWM_MspInit+0x3c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10d      	bne.n	8001252 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_TIM_PWM_MspInit+0x40>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_TIM_PWM_MspInit+0x40>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <HAL_TIM_PWM_MspInit+0x40>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d115      	bne.n	80012a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_TIM_Base_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	201d      	movs	r0, #29
 800129c:	f000 ffbd 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012a0:	201d      	movs	r0, #29
 80012a2:	f000 ffd6 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40000400 	.word	0x40000400
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11e      	bne.n	8001318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_TIM_MspPostInit+0x6c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_TIM_MspPostInit+0x6c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_Pin;
 80012f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_TIM_MspPostInit+0x70>)
 8001314:	f001 f84a 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010000 	.word	0x40010000
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_UART_MspInit+0x94>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d133      	bne.n	80013b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <HAL_UART_MspInit+0x9c>)
 80013a2:	f001 f803 	bl	80023ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2026      	movs	r0, #38	@ 0x26
 80013ac:	f000 ff35 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b0:	2026      	movs	r0, #38	@ 0x26
 80013b2:	f000 ff4e 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f96f 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <ADC_IRQHandler+0x10>)
 8001432:	f000 faad 	bl	8001990 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000084 	.word	0x20000084

08001440 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <TIM3_IRQHandler+0x10>)
 8001446:	f002 fc1b 	bl	8003c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001c4 	.word	0x200001c4

08001454 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <SPI2_IRQHandler+0x10>)
 800145a:	f001 ff31 	bl	80032c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000cc 	.word	0x200000cc

08001468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <USART2_IRQHandler+0x10>)
 800146e:	f003 fbc7 	bl	8004c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000020c 	.word	0x2000020c

0800147c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001480:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001484:	f001 f948 	bl	8002718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001490:	4802      	ldr	r0, [pc, #8]	@ (800149c <SPI3_IRQHandler+0x10>)
 8001492:	f001 ff15 	bl	80032c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000124 	.word	0x20000124

080014a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b2:	f7ff fd29 	bl	8000f08 <__io_getchar>
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
  }

  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e009      	b.n	8001500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fcf5 	bl	8000ee4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf1      	blt.n	80014ec <_write+0x12>
  }
  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153a:	605a      	str	r2, [r3, #4]
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f004 fcda 	bl	8005f64 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20020000 	.word	0x20020000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	200002b0 	.word	0x200002b0
 80015e4:	20000408 	.word	0x20000408

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001644 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001610:	f7ff ffea 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	@ (800164c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	@ (8001658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f004 fc99 	bl	8005f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff f89f 	bl	8000780 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001650:	08006e9c 	.word	0x08006e9c
  ldr r2, =_sbss
 8001654:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001658:	20000404 	.word	0x20000404

0800165c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <DMA1_Stream0_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <HAL_Init+0x40>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <HAL_Init+0x40>)
 8001676:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800167a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <HAL_Init+0x40>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 fdbb 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff fc84 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fdd3 	bl	800226e <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 fd9b 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	@ (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	200002b4 	.word	0x200002b4

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200002b4 	.word	0x200002b4

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff ffee 	bl	800172c <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_Delay+0x44>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800176a:	bf00      	nop
 800176c:	f7ff ffde 	bl	800172c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008

0800178c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e033      	b.n	800180a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fc20 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017d2:	f023 0302 	bic.w	r3, r3, #2
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fb3a 	bl	8001e58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80017fa:	e001      	b.n	8001800 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADC_Start_IT+0x1a>
 800182a:	2302      	movs	r3, #2
 800182c:	e0a1      	b.n	8001972 <HAL_ADC_Start_IT+0x15e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d018      	beq.n	8001876 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001854:	4b4a      	ldr	r3, [pc, #296]	@ (8001980 <HAL_ADC_Start_IT+0x16c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <HAL_ADC_Start_IT+0x170>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9a      	lsrs	r2, r3, #18
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d169      	bne.n	8001958 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	f023 0206 	bic.w	r2, r3, #6
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <HAL_ADC_Start_IT+0x174>)
 80018e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018ec:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018fc:	f043 0320 	orr.w	r3, r3, #32
 8001900:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d129      	bne.n	8001970 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	e020      	b.n	8001970 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a16      	ldr	r2, [pc, #88]	@ (800198c <HAL_ADC_Start_IT+0x178>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d11b      	bne.n	8001970 <HAL_ADC_Start_IT+0x15c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d114      	bne.n	8001970 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e00b      	b.n	8001970 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000
 8001984:	431bde83 	.word	0x431bde83
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000

08001990 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d049      	beq.n	8001a5a <HAL_ADC_IRQHandler+0xca>
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d046      	beq.n	8001a5a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d12b      	bne.n	8001a4a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d127      	bne.n	8001a4a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0220 	bic.w	r2, r2, #32
 8001a24:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fdc6 	bl	80005dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0212 	mvn.w	r2, #18
 8001a58:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a68:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d057      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x190>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d054      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d139      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d12b      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d124      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d11d      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d119      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fa9d 	bl	8002050 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 020c 	mvn.w	r2, #12
 8001b1e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d017      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x1d6>
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d014      	beq.n	8001b66 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10d      	bne.n	8001b66 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f837 	bl	8001bca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0201 	mvn.w	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b74:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d015      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x218>
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f043 0202 	orr.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0220 	mvn.w	r2, #32
 8001b96:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f820 	bl	8001bde <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f06f 0220 	mvn.w	r2, #32
 8001ba6:	601a      	str	r2, [r3, #0]
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e113      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x244>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b09      	cmp	r3, #9
 8001c1e:	d925      	bls.n	8001c6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68d9      	ldr	r1, [r3, #12]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	3b1e      	subs	r3, #30
 8001c36:	2207      	movs	r2, #7
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	4603      	mov	r3, r0
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4403      	add	r3, r0
 8001c5e:	3b1e      	subs	r3, #30
 8001c60:	409a      	lsls	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	e022      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	2207      	movs	r2, #7
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4403      	add	r3, r0
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d824      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b05      	subs	r3, #5
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b05      	subs	r3, #5
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d02:	e04c      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d824      	bhi.n	8001d56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b23      	subs	r3, #35	@ 0x23
 8001d1e:	221f      	movs	r2, #31
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43da      	mvns	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b23      	subs	r3, #35	@ 0x23
 8001d48:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d54:	e023      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b41      	subs	r3, #65	@ 0x41
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	400a      	ands	r2, r1
 8001d76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b41      	subs	r3, #65	@ 0x41
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_ADC_ConfigChannel+0x250>)
 8001da0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_ADC_ConfigChannel+0x254>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d10f      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d8>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d10b      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_ADC_ConfigChannel+0x254>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12b      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x23a>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_ADC_ConfigChannel+0x258>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d003      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x1f4>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b11      	cmp	r3, #17
 8001de6:	d122      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_ADC_ConfigChannel+0x258>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d111      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_ADC_ConfigChannel+0x25c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_ADC_ConfigChannel+0x260>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9a      	lsrs	r2, r3, #18
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e20:	e002      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40012300 	.word	0x40012300
 8001e48:	40012000 	.word	0x40012000
 8001e4c:	10000012 	.word	0x10000012
 8001e50:	20000000 	.word	0x20000000
 8001e54:	431bde83 	.word	0x431bde83

08001e58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e60:	4b79      	ldr	r3, [pc, #484]	@ (8002048 <ADC_Init+0x1f0>)
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	021a      	lsls	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6899      	ldr	r1, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	4a58      	ldr	r2, [pc, #352]	@ (800204c <ADC_Init+0x1f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001efe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	e00f      	b.n	8001f56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0202 	bic.w	r2, r2, #2
 8001f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
 8001f70:	005a      	lsls	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	035a      	lsls	r2, r3, #13
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e007      	b.n	8001fcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	051a      	lsls	r2, r3, #20
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800200e:	025a      	lsls	r2, r3, #9
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6899      	ldr	r1, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	029a      	lsls	r2, r3, #10
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40012300 	.word	0x40012300
 800204c:	0f000001 	.word	0x0f000001

08002050 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fa4a 	bl	800172c <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d008      	beq.n	80022b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e052      	b.n	800235e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0216 	bic.w	r2, r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_DMA_Abort+0x62>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0208 	bic.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002308:	e013      	b.n	8002332 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230a:	f7ff fa0f 	bl	800172c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b05      	cmp	r3, #5
 8002316:	d90c      	bls.n	8002332 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e015      	b.n	800235e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e4      	bne.n	800230a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	223f      	movs	r2, #63	@ 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d004      	beq.n	8002384 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00c      	b.n	800239e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e159      	b.n	800267c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8148 	bne.w	8002676 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a2 	beq.w	8002676 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b57      	ldr	r3, [pc, #348]	@ (8002694 <HAL_GPIO_Init+0x2e8>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a56      	ldr	r2, [pc, #344]	@ (8002694 <HAL_GPIO_Init+0x2e8>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b54      	ldr	r3, [pc, #336]	@ (8002694 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a52      	ldr	r2, [pc, #328]	@ (8002698 <HAL_GPIO_Init+0x2ec>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a49      	ldr	r2, [pc, #292]	@ (800269c <HAL_GPIO_Init+0x2f0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d019      	beq.n	80025ae <HAL_GPIO_Init+0x202>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a48      	ldr	r2, [pc, #288]	@ (80026a0 <HAL_GPIO_Init+0x2f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0x1fe>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a47      	ldr	r2, [pc, #284]	@ (80026a4 <HAL_GPIO_Init+0x2f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00d      	beq.n	80025a6 <HAL_GPIO_Init+0x1fa>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a46      	ldr	r2, [pc, #280]	@ (80026a8 <HAL_GPIO_Init+0x2fc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <HAL_GPIO_Init+0x1f6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a45      	ldr	r2, [pc, #276]	@ (80026ac <HAL_GPIO_Init+0x300>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_GPIO_Init+0x1f2>
 800259a:	2304      	movs	r3, #4
 800259c:	e008      	b.n	80025b0 <HAL_GPIO_Init+0x204>
 800259e:	2307      	movs	r3, #7
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x204>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x204>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x204>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x204>
 80025ae:	2300      	movs	r3, #0
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c0:	4935      	ldr	r1, [pc, #212]	@ (8002698 <HAL_GPIO_Init+0x2ec>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ce:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f2:	4a2f      	ldr	r2, [pc, #188]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f8:	4b2d      	ldr	r3, [pc, #180]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800261c:	4a24      	ldr	r2, [pc, #144]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002622:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002646:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264c:	4b18      	ldr	r3, [pc, #96]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002670:	4a0f      	ldr	r2, [pc, #60]	@ (80026b0 <HAL_GPIO_Init+0x304>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	f67f aea2 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	40013800 	.word	0x40013800
 800269c:	40020000 	.word	0x40020000
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f806 	bl	8002748 <HAL_GPIO_EXTI_Callback>
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013c00 	.word	0x40013c00

08002748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e267      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d00c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002792:	2b08      	cmp	r3, #8
 8002794:	d112      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027a2:	d10b      	bne.n	80027bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	4b7e      	ldr	r3, [pc, #504]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d05b      	beq.n	8002868 <HAL_RCC_OscConfig+0x108>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d157      	bne.n	8002868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e242      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x74>
 80027c6:	4b76      	ldr	r3, [pc, #472]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a75      	ldr	r2, [pc, #468]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e01d      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x98>
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a6f      	ldr	r2, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b6d      	ldr	r3, [pc, #436]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6c      	ldr	r2, [pc, #432]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0xb0>
 80027f8:	4b69      	ldr	r3, [pc, #420]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a68      	ldr	r2, [pc, #416]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7fe ff88 	bl	800172c <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7fe ff84 	bl	800172c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	@ 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e207      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0xc0>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe ff74 	bl	800172c <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe ff70 	bl	800172c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1f3      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	4b51      	ldr	r3, [pc, #324]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0xe8>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d063      	beq.n	800293e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b47      	ldr	r3, [pc, #284]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	4b41      	ldr	r3, [pc, #260]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e1c7      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4937      	ldr	r1, [pc, #220]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	e03a      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d0:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe ff29 	bl	800172c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe ff25 	bl	800172c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1a8      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4925      	ldr	r1, [pc, #148]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e015      	b.n	800293e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x244>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe ff08 	bl	800172c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe ff04 	bl	800172c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e187      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d036      	beq.n	80029b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe fee8 	bl	800172c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe fee4 	bl	800172c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e167      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_OscConfig+0x240>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x200>
 800297e:	e01b      	b.n	80029b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x248>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe fed1 	bl	800172c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298c:	e00e      	b.n	80029ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298e:	f7fe fecd 	bl	800172c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d907      	bls.n	80029ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e150      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470000 	.word	0x42470000
 80029a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ea      	bne.n	800298e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8097 	beq.w	8002af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b81      	ldr	r3, [pc, #516]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b7d      	ldr	r3, [pc, #500]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e6:	4b7a      	ldr	r3, [pc, #488]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b77      	ldr	r3, [pc, #476]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d118      	bne.n	8002a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b74      	ldr	r3, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a73      	ldr	r2, [pc, #460]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fe8d 	bl	800172c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe fe89 	bl	800172c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e10c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x474>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2ea>
 8002a3c:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a63      	ldr	r2, [pc, #396]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x30c>
 8002a52:	4b5f      	ldr	r3, [pc, #380]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x324>
 8002a6c:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a78:	4b55      	ldr	r3, [pc, #340]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a54      	ldr	r2, [pc, #336]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fe4e 	bl	800172c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe4a 	bl	800172c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0cb      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	4b49      	ldr	r3, [pc, #292]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x334>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fe38 	bl	800172c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fe34 	bl	800172c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0b5      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a1 	beq.w	8002c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002afe:	4b34      	ldr	r3, [pc, #208]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d05c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d141      	bne.n	8002b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fe08 	bl	800172c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fe04 	bl	800172c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e087      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	491b      	ldr	r1, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fddd 	bl	800172c <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fdd9 	bl	800172c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e05c      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x416>
 8002b94:	e054      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fdc6 	bl	800172c <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fdc2 	bl	800172c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e045      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x444>
 8002bc2:	e03d      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e038      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x4ec>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d028      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d121      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d11a      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d111      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0cc      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d90c      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d044      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e06f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e067      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4934      	ldr	r1, [pc, #208]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d40:	f7fe fcf4 	bl	800172c <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fe fcf0 	bl	800172c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e04f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20c      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	@ (8002e08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fc54 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	08006e40 	.word	0x08006e40
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b094      	sub	sp, #80	@ 0x50
 8002e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e34:	4b79      	ldr	r3, [pc, #484]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d00d      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x40>
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	f200 80e1 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4e:	e0db      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b73      	ldr	r3, [pc, #460]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e54:	e0db      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e56:	4b73      	ldr	r3, [pc, #460]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e5a:	e0d8      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e66:	4b6d      	ldr	r3, [pc, #436]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e72:	4b6a      	ldr	r3, [pc, #424]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	2200      	movs	r2, #0
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	0159      	lsls	r1, r3, #5
 8002e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea0:	0150      	lsls	r0, r2, #5
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	1a51      	subs	r1, r2, r1
 8002eaa:	6139      	str	r1, [r7, #16]
 8002eac:	4629      	mov	r1, r5
 8002eae:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	4651      	mov	r1, sl
 8002ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eca:	4651      	mov	r1, sl
 8002ecc:	018a      	lsls	r2, r1, #6
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eee:	4690      	mov	r8, r2
 8002ef0:	4699      	mov	r9, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	eb18 0303 	adds.w	r3, r8, r3
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	462b      	mov	r3, r5
 8002efc:	eb49 0303 	adc.w	r3, r9, r3
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	024b      	lsls	r3, r1, #9
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f18:	4621      	mov	r1, r4
 8002f1a:	024a      	lsls	r2, r1, #9
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f2c:	f7fd f9b0 	bl	8000290 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f38:	e058      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b38      	ldr	r3, [pc, #224]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	4611      	mov	r1, r2
 8002f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	f04f 0000 	mov.w	r0, #0
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	0159      	lsls	r1, r3, #5
 8002f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f66:	0150      	lsls	r0, r2, #5
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f72:	4649      	mov	r1, r9
 8002f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f90:	eb63 050b 	sbc.w	r5, r3, fp
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	00eb      	lsls	r3, r5, #3
 8002f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa2:	00e2      	lsls	r2, r4, #3
 8002fa4:	4614      	mov	r4, r2
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	18e3      	adds	r3, r4, r3
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	464b      	mov	r3, r9
 8002fb0:	eb45 0303 	adc.w	r3, r5, r3
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	028b      	lsls	r3, r1, #10
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fcc:	4621      	mov	r1, r4
 8002fce:	028a      	lsls	r2, r1, #10
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe0:	f7fd f956 	bl	8000290 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003006:	e002      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x204>)
 800300a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800300c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003010:	4618      	mov	r0, r3
 8003012:	3750      	adds	r7, #80	@ 0x50
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	@ (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08006e50 	.word	0x08006e50

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffdc 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	@ (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08006e50 	.word	0x08006e50

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07b      	b.n	800319a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd ffd0 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0104 	and.w	r1, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	f003 0210 	and.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00c      	beq.n	80031e0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031cc:	d106      	bne.n	80031dc <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_SPI_TransmitReceive_IT+0x38>
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d001      	beq.n	80031e0 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	e061      	b.n	80032a4 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e056      	b.n	80032a4 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_SPI_TransmitReceive_IT+0x60>
 8003200:	2302      	movs	r3, #2
 8003202:	e04f      	b.n	80032a4 <HAL_SPI_TransmitReceive_IT+0x100>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b04      	cmp	r3, #4
 8003216:	d003      	beq.n	8003220 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2205      	movs	r2, #5
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a16      	ldr	r2, [pc, #88]	@ (80032b4 <HAL_SPI_TransmitReceive_IT+0x110>)
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
 800325e:	e005      	b.n	800326c <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <HAL_SPI_TransmitReceive_IT+0x114>)
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a14      	ldr	r2, [pc, #80]	@ (80032bc <HAL_SPI_TransmitReceive_IT+0x118>)
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b40      	cmp	r3, #64	@ 0x40
 8003278:	d007      	beq.n	800328a <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80032a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	080035bd 	.word	0x080035bd
 80032b4:	0800361d 	.word	0x0800361d
 80032b8:	080034f9 	.word	0x080034f9
 80032bc:	0800355d 	.word	0x0800355d

080032c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d009      	beq.n	8003300 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
    return;
 80032fe:	e0ce      	b.n	800349e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_SPI_IRQHandler+0x5e>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
    return;
 800331c:	e0bf      	b.n	800349e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_SPI_IRQHandler+0x7e>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80b0 	beq.w	800349e <HAL_SPI_IRQHandler+0x1de>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80aa 	beq.w	800349e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d023      	beq.n	800339c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d011      	beq.n	8003384 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	e00b      	b.n	800339c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003384:	2300      	movs	r3, #0
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
        return;
 800339a:	e080      	b.n	800349e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d014      	beq.n	80033d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	f043 0208 	orr.w	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d04f      	beq.n	800349c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800340a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_SPI_IRQHandler+0x168>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d034      	beq.n	8003492 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0203 	bic.w	r2, r2, #3
 8003436:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d011      	beq.n	8003464 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003444:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <HAL_SPI_IRQHandler+0x1e4>)
 8003446:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe ff8a 	bl	8002366 <HAL_DMA_Abort_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	4a0c      	ldr	r2, [pc, #48]	@ (80034a4 <HAL_SPI_IRQHandler+0x1e4>)
 8003472:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe ff74 	bl	8002366 <HAL_DMA_Abort_IT>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003488:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003490:	e003      	b.n	800349a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f812 	bl	80034bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003498:	e000      	b.n	800349c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800349a:	bf00      	nop
    return;
 800349c:	bf00      	nop
  }
}
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	080034d1 	.word	0x080034d1

080034a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff ffe6 	bl	80034bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f103 020c 	add.w	r2, r3, #12
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10f      	bne.n	8003554 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003542:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f970 	bl	8003834 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035a2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f940 	bl	8003834 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	b292      	uxth	r2, r2
 80035d0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003602:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f910 	bl	8003834 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003660:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8e1 	bl	8003834 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800368c:	f7fe f84e 	bl	800172c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800369c:	f7fe f846 	bl	800172c <HAL_GetTick>
 80036a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a2:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	0d1b      	lsrs	r3, r3, #20
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b2:	e054      	b.n	800375e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d050      	beq.n	800375e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036bc:	f7fe f836 	bl	800172c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d902      	bls.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d13d      	bne.n	800374e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ea:	d111      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f4:	d004      	beq.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d107      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800370e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003718:	d10f      	bne.n	800373a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e017      	b.n	800377e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3b01      	subs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d19b      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000000 	.word	0x20000000

0800378c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2201      	movs	r2, #1
 80037a0:	2102      	movs	r1, #2
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff ff6a 	bl	800367c <SPI_WaitFlagStateUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e032      	b.n	8003824 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037be:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <SPI_EndRxTxTransaction+0xa0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003830 <SPI_EndRxTxTransaction+0xa4>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	0d5b      	lsrs	r3, r3, #21
 80037ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037dc:	d112      	bne.n	8003804 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff ff47 	bl	800367c <SPI_WaitFlagStateUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d016      	beq.n	8003822 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e00f      	b.n	8003824 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3b01      	subs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b80      	cmp	r3, #128	@ 0x80
 800381c:	d0f2      	beq.n	8003804 <SPI_EndRxTxTransaction+0x78>
 800381e:	e000      	b.n	8003822 <SPI_EndRxTxTransaction+0x96>
        break;
 8003820:	bf00      	nop
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000000 	.word	0x20000000
 8003830:	165e9f81 	.word	0x165e9f81

08003834 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800383c:	4b35      	ldr	r3, [pc, #212]	@ (8003914 <SPI_CloseRxTx_ISR+0xe0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a35      	ldr	r2, [pc, #212]	@ (8003918 <SPI_CloseRxTx_ISR+0xe4>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	2264      	movs	r2, #100	@ 0x64
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003850:	f7fd ff6c 	bl	800172c <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0220 	bic.w	r2, r2, #32
 8003864:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003878:	e009      	b.n	800388e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3b01      	subs	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0eb      	beq.n	8003866 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	2164      	movs	r1, #100	@ 0x64
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff7a 	bl	800378c <SPI_EndRxTxTransaction>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d115      	bne.n	80038fc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d107      	bne.n	80038ec <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fddf 	bl	80034a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80038ea:	e00e      	b.n	800390a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fc fe43 	bl	8000580 <HAL_SPI_TxRxCpltCallback>
}
 80038fa:	e006      	b.n	800390a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fdd9 	bl	80034bc <HAL_SPI_ErrorCallback>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000
 8003918:	057619f1 	.word	0x057619f1

0800391c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e041      	b.n	80039b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fc90 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fc32 	bl	80041c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e044      	b.n	8003a5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <HAL_TIM_Base_Start_IT+0xb0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d018      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x6c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fe:	d013      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x6c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1a      	ldr	r2, [pc, #104]	@ (8003a70 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00e      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x6c>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x6c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x6c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_TIM_Base_Start_IT+0xc0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d010      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	e007      	b.n	8003a5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40014000 	.word	0x40014000

08003a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e041      	b.n	8003b16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd fbbc 	bl	8001224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fb80 	bl	80041c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_TIM_PWM_Start+0x24>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e022      	b.n	8003b8a <HAL_TIM_PWM_Start+0x6a>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d109      	bne.n	8003b5e <HAL_TIM_PWM_Start+0x3e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	e015      	b.n	8003b8a <HAL_TIM_PWM_Start+0x6a>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d109      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x58>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e008      	b.n	8003b8a <HAL_TIM_PWM_Start+0x6a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e068      	b.n	8003c64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Start+0x82>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba0:	e013      	b.n	8003bca <HAL_TIM_PWM_Start+0xaa>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x92>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb0:	e00b      	b.n	8003bca <HAL_TIM_PWM_Start+0xaa>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc0:	e003      	b.n	8003bca <HAL_TIM_PWM_Start+0xaa>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fda8 	bl	8004728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a23      	ldr	r2, [pc, #140]	@ (8003c6c <HAL_TIM_PWM_Start+0x14c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d107      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <HAL_TIM_PWM_Start+0x14c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x10e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d013      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x10e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	@ (8003c70 <HAL_TIM_PWM_Start+0x150>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x10e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <HAL_TIM_PWM_Start+0x154>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x10e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <HAL_TIM_PWM_Start+0x158>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIM_PWM_Start+0x10e>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_TIM_PWM_Start+0x15c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d010      	beq.n	8003c62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	e007      	b.n	8003c62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40014000 	.word	0x40014000

08003c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d020      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01b      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0202 	mvn.w	r2, #2
 8003cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa5b 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa4d 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa5e 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d020      	beq.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01b      	beq.n	8003d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0204 	mvn.w	r2, #4
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa35 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa27 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fa38 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d020      	beq.n	8003d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0208 	mvn.w	r2, #8
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2204      	movs	r2, #4
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa0f 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa01 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa12 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d020      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01b      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0210 	mvn.w	r2, #16
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9e9 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9db 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9ec 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0201 	mvn.w	r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc fc86 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fd7c 	bl	8004908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9bd 	bl	80041ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0220 	mvn.w	r2, #32
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fd4e 	bl	80048f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e0ae      	b.n	8003fdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b0c      	cmp	r3, #12
 8003e8a:	f200 809f 	bhi.w	8003fcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003fcd 	.word	0x08003fcd
 8003e9c:	08003fcd 	.word	0x08003fcd
 8003ea0:	08003fcd 	.word	0x08003fcd
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003fcd 	.word	0x08003fcd
 8003eac:	08003fcd 	.word	0x08003fcd
 8003eb0:	08003fcd 	.word	0x08003fcd
 8003eb4:	08003f4b 	.word	0x08003f4b
 8003eb8:	08003fcd 	.word	0x08003fcd
 8003ebc:	08003fcd 	.word	0x08003fcd
 8003ec0:	08003fcd 	.word	0x08003fcd
 8003ec4:	08003f8b 	.word	0x08003f8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa04 	bl	80042dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	619a      	str	r2, [r3, #24]
      break;
 8003f06:	e064      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fa4a 	bl	80043a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6999      	ldr	r1, [r3, #24]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	619a      	str	r2, [r3, #24]
      break;
 8003f48:	e043      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fa95 	bl	8004480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0208 	orr.w	r2, r2, #8
 8003f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0204 	bic.w	r2, r2, #4
 8003f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	61da      	str	r2, [r3, #28]
      break;
 8003f88:	e023      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fadf 	bl	8004554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69d9      	ldr	r1, [r3, #28]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	021a      	lsls	r2, r3, #8
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	61da      	str	r2, [r3, #28]
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_ConfigClockSource+0x1c>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0b4      	b.n	800416a <HAL_TIM_ConfigClockSource+0x186>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800401e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004038:	d03e      	beq.n	80040b8 <HAL_TIM_ConfigClockSource+0xd4>
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403e:	f200 8087 	bhi.w	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004046:	f000 8086 	beq.w	8004156 <HAL_TIM_ConfigClockSource+0x172>
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404e:	d87f      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b70      	cmp	r3, #112	@ 0x70
 8004052:	d01a      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xa6>
 8004054:	2b70      	cmp	r3, #112	@ 0x70
 8004056:	d87b      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b60      	cmp	r3, #96	@ 0x60
 800405a:	d050      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x11a>
 800405c:	2b60      	cmp	r3, #96	@ 0x60
 800405e:	d877      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b50      	cmp	r3, #80	@ 0x50
 8004062:	d03c      	beq.n	80040de <HAL_TIM_ConfigClockSource+0xfa>
 8004064:	2b50      	cmp	r3, #80	@ 0x50
 8004066:	d873      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d058      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x13a>
 800406c:	2b40      	cmp	r3, #64	@ 0x40
 800406e:	d86f      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b30      	cmp	r3, #48	@ 0x30
 8004072:	d064      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004074:	2b30      	cmp	r3, #48	@ 0x30
 8004076:	d86b      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d060      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d867      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d05c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	2b10      	cmp	r3, #16
 8004086:	d05a      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	e062      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	f000 fb25 	bl	80046e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	609a      	str	r2, [r3, #8]
      break;
 80040b6:	e04f      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	f000 fb0e 	bl	80046e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040da:	609a      	str	r2, [r3, #8]
      break;
 80040dc:	e03c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fa82 	bl	80045f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2150      	movs	r1, #80	@ 0x50
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fadb 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e02c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	461a      	mov	r2, r3
 800410c:	f000 faa1 	bl	8004652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2160      	movs	r1, #96	@ 0x60
 8004116:	4618      	mov	r0, r3
 8004118:	f000 facb 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 800411c:	e01c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 fa62 	bl	80045f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fabb 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 800413c:	e00c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f000 fab2 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 800414e:	e003      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e000      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <TIM_Base_SetConfig+0xfc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00f      	beq.n	80041fc <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e2:	d00b      	beq.n	80041fc <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a37      	ldr	r2, [pc, #220]	@ (80042c4 <TIM_Base_SetConfig+0x100>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a36      	ldr	r2, [pc, #216]	@ (80042c8 <TIM_Base_SetConfig+0x104>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a35      	ldr	r2, [pc, #212]	@ (80042cc <TIM_Base_SetConfig+0x108>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d108      	bne.n	800420e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2b      	ldr	r2, [pc, #172]	@ (80042c0 <TIM_Base_SetConfig+0xfc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01b      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421c:	d017      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a28      	ldr	r2, [pc, #160]	@ (80042c4 <TIM_Base_SetConfig+0x100>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a27      	ldr	r2, [pc, #156]	@ (80042c8 <TIM_Base_SetConfig+0x104>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <TIM_Base_SetConfig+0x108>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a25      	ldr	r2, [pc, #148]	@ (80042d0 <TIM_Base_SetConfig+0x10c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a24      	ldr	r2, [pc, #144]	@ (80042d4 <TIM_Base_SetConfig+0x110>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a23      	ldr	r2, [pc, #140]	@ (80042d8 <TIM_Base_SetConfig+0x114>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a0e      	ldr	r2, [pc, #56]	@ (80042c0 <TIM_Base_SetConfig+0xfc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d103      	bne.n	8004294 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]
  }
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 0201 	bic.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 0302 	bic.w	r3, r3, #2
 8004324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <TIM_OC1_SetConfig+0xc8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10c      	bne.n	8004352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0308 	bic.w	r3, r3, #8
 800433e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <TIM_OC1_SetConfig+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d111      	bne.n	800437e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40010000 	.word	0x40010000

080043a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f023 0210 	bic.w	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0320 	bic.w	r3, r3, #32
 80043f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1e      	ldr	r2, [pc, #120]	@ (800447c <TIM_OC2_SetConfig+0xd4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10d      	bne.n	8004424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004422:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a15      	ldr	r2, [pc, #84]	@ (800447c <TIM_OC2_SetConfig+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d113      	bne.n	8004454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800443a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000

08004480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004550 <TIM_OC3_SetConfig+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10d      	bne.n	80044fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a14      	ldr	r2, [pc, #80]	@ (8004550 <TIM_OC3_SetConfig+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d113      	bne.n	800452a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40010000 	.word	0x40010000

08004554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800459e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	@ (80045f0 <TIM_OC4_SetConfig+0x9c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d109      	bne.n	80045c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000

080045f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0201 	bic.w	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800461e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 030a 	bic.w	r3, r3, #10
 8004630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f023 0210 	bic.w	r2, r3, #16
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800467c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f043 0307 	orr.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	431a      	orrs	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2201      	movs	r2, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e050      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d8:	d013      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	@ (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a13      	ldr	r2, [pc, #76]	@ (800484c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40014000 	.word	0x40014000

08004850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e03d      	b.n	80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e042      	b.n	80049b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fcf2 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	@ 0x24
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800495e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fdff 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	@ 0x28
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d175      	bne.n	8004ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Transmit+0x2c>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e06e      	b.n	8004aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2221      	movs	r2, #33	@ 0x21
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fa:	f7fc fe97 	bl	800172c <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a14:	d108      	bne.n	8004a28 <HAL_UART_Transmit+0x6c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e003      	b.n	8004a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a30:	e02e      	b.n	8004a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	@ 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fb9b 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e03a      	b.n	8004aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e007      	b.n	8004a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1cb      	bne.n	8004a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2140      	movs	r1, #64	@ 0x40
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fb67 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b08a      	sub	sp, #40	@ 0x28
 8004ad6:	af02      	add	r7, sp, #8
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	f040 8081 	bne.w	8004bf6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Receive+0x2e>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e079      	b.n	8004bf8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2222      	movs	r2, #34	@ 0x22
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b18:	f7fc fe08 	bl	800172c <HAL_GetTick>
 8004b1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	88fa      	ldrh	r2, [r7, #6]
 8004b22:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b32:	d108      	bne.n	8004b46 <HAL_UART_Receive+0x74>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e003      	b.n	8004b4e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b4e:	e047      	b.n	8004be0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2200      	movs	r2, #0
 8004b58:	2120      	movs	r1, #32
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fb0c 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e042      	b.n	8004bf8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10c      	bne.n	8004b92 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e01f      	b.n	8004bd2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9a:	d007      	beq.n	8004bac <HAL_UART_Receive+0xda>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <HAL_UART_Receive+0xe8>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e008      	b.n	8004bcc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1b2      	bne.n	8004b50 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b0ba      	sub	sp, #232	@ 0xe8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_UART_IRQHandler+0x66>
 8004c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fbc2 	bl	80053e8 <UART_Receive_IT>
      return;
 8004c64:	e25b      	b.n	800511e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80de 	beq.w	8004e2c <HAL_UART_IRQHandler+0x22c>
 8004c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80d1 	beq.w	8004e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xae>
 8004c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xd2>
 8004cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	f043 0202 	orr.w	r2, r3, #2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xf6>
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cee:	f043 0204 	orr.w	r2, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_UART_IRQHandler+0x126>
 8004d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f043 0208 	orr.w	r2, r3, #8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 81f2 	beq.w	8005114 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_UART_IRQHandler+0x14e>
 8004d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb4d 	bl	80053e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b40      	cmp	r3, #64	@ 0x40
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <HAL_UART_IRQHandler+0x17a>
 8004d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d04f      	beq.n	8004e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa55 	bl	800522a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b40      	cmp	r3, #64	@ 0x40
 8004d8c:	d141      	bne.n	8004e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3314      	adds	r3, #20
 8004d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1d9      	bne.n	8004d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d013      	beq.n	8004e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fe0 <HAL_UART_IRQHandler+0x3e0>)
 8004de8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fd fab9 	bl	8002366 <HAL_DMA_Abort_IT>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d016      	beq.n	8004e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	e00e      	b.n	8004e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f99e 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	e00a      	b.n	8004e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f99a 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	e006      	b.n	8004e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f996 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e26:	e175      	b.n	8005114 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	bf00      	nop
    return;
 8004e2a:	e173      	b.n	8005114 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 814f 	bne.w	80050d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8148 	beq.w	80050d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8141 	beq.w	80050d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e72:	2b40      	cmp	r3, #64	@ 0x40
 8004e74:	f040 80b6 	bne.w	8004fe4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8145 	beq.w	8005118 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e96:	429a      	cmp	r2, r3
 8004e98:	f080 813e 	bcs.w	8005118 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eae:	f000 8088 	beq.w	8004fc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1d9      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e1      	bne.n	8004efe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3314      	adds	r3, #20
 8004f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3314      	adds	r3, #20
 8004f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e3      	bne.n	8004f3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fa4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fa6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004faa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e3      	bne.n	8004f80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd f962 	bl	8002286 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8c1 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fde:	e09b      	b.n	8005118 <HAL_UART_IRQHandler+0x518>
 8004fe0:	080052f1 	.word	0x080052f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 808e 	beq.w	800511c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8089 	beq.w	800511c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800501a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005020:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800502e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005030:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005034:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800503c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	623b      	str	r3, [r7, #32]
   return(result);
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005066:	633a      	str	r2, [r7, #48]	@ 0x30
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800506c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e3      	bne.n	8005042 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60fb      	str	r3, [r7, #12]
   return(result);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050ac:	61fa      	str	r2, [r7, #28]
 80050ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e3      	bne.n	8005088 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f847 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050d2:	e023      	b.n	800511c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <HAL_UART_IRQHandler+0x4f4>
 80050e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f913 	bl	8005318 <UART_Transmit_IT>
    return;
 80050f2:	e014      	b.n	800511e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00e      	beq.n	800511e <HAL_UART_IRQHandler+0x51e>
 8005100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f953 	bl	80053b8 <UART_EndTransmit_IT>
    return;
 8005112:	e004      	b.n	800511e <HAL_UART_IRQHandler+0x51e>
    return;
 8005114:	bf00      	nop
 8005116:	e002      	b.n	800511e <HAL_UART_IRQHandler+0x51e>
      return;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_UART_IRQHandler+0x51e>
      return;
 800511c:	bf00      	nop
  }
}
 800511e:	37e8      	adds	r7, #232	@ 0xe8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e03b      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d037      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fc facb 	bl	800172c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e03a      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d023      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d020      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d01d      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d116      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f81d 	bl	800522a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2208      	movs	r2, #8
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b4      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522a:	b480      	push	{r7}
 800522c:	b095      	sub	sp, #84	@ 0x54
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005252:	643a      	str	r2, [r7, #64]	@ 0x40
 8005254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005258:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	61fb      	str	r3, [r7, #28]
   return(result);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f023 0301 	bic.w	r3, r3, #1
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800528c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d119      	bne.n	80052d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052c2:	61ba      	str	r2, [r7, #24]
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052e4:	bf00      	nop
 80052e6:	3754      	adds	r7, #84	@ 0x54
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff ff1e 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b21      	cmp	r3, #33	@ 0x21
 800532a:	d13e      	bne.n	80053aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005334:	d114      	bne.n	8005360 <UART_Transmit_IT+0x48>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d110      	bne.n	8005360 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005352:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]
 800535e:	e008      	b.n	8005372 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6211      	str	r1, [r2, #32]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	4619      	mov	r1, r3
 8005380:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005394:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fea3 	bl	8005124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	@ 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b22      	cmp	r3, #34	@ 0x22
 80053fa:	f040 80ae 	bne.w	800555a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005406:	d117      	bne.n	8005438 <UART_Receive_IT+0x50>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d113      	bne.n	8005438 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	b29a      	uxth	r2, r3
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	629a      	str	r2, [r3, #40]	@ 0x28
 8005436:	e026      	b.n	8005486 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544a:	d007      	beq.n	800545c <UART_Receive_IT+0x74>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <UART_Receive_IT+0x82>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b2da      	uxtb	r2, r3
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e008      	b.n	800547c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005476:	b2da      	uxtb	r2, r3
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4619      	mov	r1, r3
 8005494:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005496:	2b00      	cmp	r3, #0
 8005498:	d15d      	bne.n	8005556 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0220 	bic.w	r2, r2, #32
 80054a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d135      	bne.n	800554c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	623a      	str	r2, [r7, #32]
 8005508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550a:	69f9      	ldr	r1, [r7, #28]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	61bb      	str	r3, [r7, #24]
   return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e5      	bne.n	80054e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d10a      	bne.n	800553e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fe0b 	bl	8005160 <HAL_UARTEx_RxEventCallback>
 800554a:	e002      	b.n	8005552 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fdf3 	bl	8005138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e002      	b.n	800555c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e000      	b.n	800555c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	@ 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b0c0      	sub	sp, #256	@ 0x100
 800556a:	af00      	add	r7, sp, #0
 800556c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	ea40 0301 	orr.w	r3, r0, r1
 800558c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	431a      	orrs	r2, r3
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055bc:	f021 010c 	bic.w	r1, r1, #12
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ca:	430b      	orrs	r3, r1
 80055cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055de:	6999      	ldr	r1, [r3, #24]
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	ea40 0301 	orr.w	r3, r0, r1
 80055ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005830 <UART_SetConfig+0x2cc>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d005      	beq.n	8005604 <UART_SetConfig+0xa0>
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005834 <UART_SetConfig+0x2d0>)
 8005600:	429a      	cmp	r2, r3
 8005602:	d104      	bne.n	800560e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fd fd30 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8005608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800560c:	e003      	b.n	8005616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7fd fd17 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8005612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005620:	f040 810c 	bne.w	800583c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005628:	2200      	movs	r2, #0
 800562a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800562e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	1891      	adds	r1, r2, r2
 800563c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800563e:	415b      	adcs	r3, r3
 8005640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005646:	4621      	mov	r1, r4
 8005648:	eb12 0801 	adds.w	r8, r2, r1
 800564c:	4629      	mov	r1, r5
 800564e:	eb43 0901 	adc.w	r9, r3, r1
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	4623      	mov	r3, r4
 800566c:	eb18 0303 	adds.w	r3, r8, r3
 8005670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005674:	462b      	mov	r3, r5
 8005676:	eb49 0303 	adc.w	r3, r9, r3
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800568a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800568e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005692:	460b      	mov	r3, r1
 8005694:	18db      	adds	r3, r3, r3
 8005696:	653b      	str	r3, [r7, #80]	@ 0x50
 8005698:	4613      	mov	r3, r2
 800569a:	eb42 0303 	adc.w	r3, r2, r3
 800569e:	657b      	str	r3, [r7, #84]	@ 0x54
 80056a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056a8:	f7fa fdf2 	bl	8000290 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4b61      	ldr	r3, [pc, #388]	@ (8005838 <UART_SetConfig+0x2d4>)
 80056b2:	fba3 2302 	umull	r2, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	011c      	lsls	r4, r3, #4
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056d4:	415b      	adcs	r3, r3
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056dc:	4641      	mov	r1, r8
 80056de:	eb12 0a01 	adds.w	sl, r2, r1
 80056e2:	4649      	mov	r1, r9
 80056e4:	eb43 0b01 	adc.w	fp, r3, r1
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	4692      	mov	sl, r2
 80056fe:	469b      	mov	fp, r3
 8005700:	4643      	mov	r3, r8
 8005702:	eb1a 0303 	adds.w	r3, sl, r3
 8005706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800570a:	464b      	mov	r3, r9
 800570c:	eb4b 0303 	adc.w	r3, fp, r3
 8005710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005728:	460b      	mov	r3, r1
 800572a:	18db      	adds	r3, r3, r3
 800572c:	643b      	str	r3, [r7, #64]	@ 0x40
 800572e:	4613      	mov	r3, r2
 8005730:	eb42 0303 	adc.w	r3, r2, r3
 8005734:	647b      	str	r3, [r7, #68]	@ 0x44
 8005736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800573a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800573e:	f7fa fda7 	bl	8000290 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b3b      	ldr	r3, [pc, #236]	@ (8005838 <UART_SetConfig+0x2d4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	@ 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800575e:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005760:	fba3 2302 	umull	r2, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800576c:	441c      	add	r4, r3
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800577c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005788:	415b      	adcs	r3, r3
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6339      	str	r1, [r7, #48]	@ 0x30
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057e4:	460b      	mov	r3, r1
 80057e6:	18db      	adds	r3, r3, r3
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ea:	4613      	mov	r3, r2
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057fa:	f7fa fd49 	bl	8000290 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005804:	fba3 1302 	umull	r1, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	2164      	movs	r1, #100	@ 0x64
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3332      	adds	r3, #50	@ 0x32
 8005816:	4a08      	ldr	r2, [pc, #32]	@ (8005838 <UART_SetConfig+0x2d4>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f003 0207 	and.w	r2, r3, #7
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4422      	add	r2, r4
 800582a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582c:	e106      	b.n	8005a3c <UART_SetConfig+0x4d8>
 800582e:	bf00      	nop
 8005830:	40011000 	.word	0x40011000
 8005834:	40011400 	.word	0x40011400
 8005838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800583c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005840:	2200      	movs	r2, #0
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800584a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800584e:	4642      	mov	r2, r8
 8005850:	464b      	mov	r3, r9
 8005852:	1891      	adds	r1, r2, r2
 8005854:	6239      	str	r1, [r7, #32]
 8005856:	415b      	adcs	r3, r3
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585e:	4641      	mov	r1, r8
 8005860:	1854      	adds	r4, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb43 0501 	adc.w	r5, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	00eb      	lsls	r3, r5, #3
 8005872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005876:	00e2      	lsls	r2, r4, #3
 8005878:	4614      	mov	r4, r2
 800587a:	461d      	mov	r5, r3
 800587c:	4643      	mov	r3, r8
 800587e:	18e3      	adds	r3, r4, r3
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005884:	464b      	mov	r3, r9
 8005886:	eb45 0303 	adc.w	r3, r5, r3
 800588a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800589a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058aa:	4629      	mov	r1, r5
 80058ac:	008b      	lsls	r3, r1, #2
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b4:	4621      	mov	r1, r4
 80058b6:	008a      	lsls	r2, r1, #2
 80058b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058bc:	f7fa fce8 	bl	8000290 <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4b60      	ldr	r3, [pc, #384]	@ (8005a48 <UART_SetConfig+0x4e4>)
 80058c6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	011c      	lsls	r4, r3, #4
 80058ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	61b9      	str	r1, [r7, #24]
 80058e8:	415b      	adcs	r3, r3
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6139      	str	r1, [r7, #16]
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005924:	464b      	mov	r3, r9
 8005926:	460a      	mov	r2, r1
 8005928:	eb42 0303 	adc.w	r3, r2, r3
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800593a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005948:	4649      	mov	r1, r9
 800594a:	008b      	lsls	r3, r1, #2
 800594c:	4641      	mov	r1, r8
 800594e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005952:	4641      	mov	r1, r8
 8005954:	008a      	lsls	r2, r1, #2
 8005956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800595a:	f7fa fc99 	bl	8000290 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b38      	ldr	r3, [pc, #224]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	@ 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	@ 0x32
 8005978:	4a33      	ldr	r2, [pc, #204]	@ (8005a48 <UART_SetConfig+0x4e4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005984:	441c      	add	r4, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	673b      	str	r3, [r7, #112]	@ 0x70
 800598e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	415b      	adcs	r3, r3
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d6:	464b      	mov	r3, r9
 80059d8:	460a      	mov	r2, r1
 80059da:	eb42 0303 	adc.w	r3, r2, r3
 80059de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a0a:	f7fa fc41 	bl	8000290 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b0d      	ldr	r3, [pc, #52]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005a14:	fba3 1302 	umull	r1, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2164      	movs	r1, #100	@ 0x64
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	@ 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	@ (8005a48 <UART_SetConfig+0x4e4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4422      	add	r2, r4
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <std>:
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	4604      	mov	r4, r0
 8005a52:	e9c0 3300 	strd	r3, r3, [r0]
 8005a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a5a:	6083      	str	r3, [r0, #8]
 8005a5c:	8181      	strh	r1, [r0, #12]
 8005a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a60:	81c2      	strh	r2, [r0, #14]
 8005a62:	6183      	str	r3, [r0, #24]
 8005a64:	4619      	mov	r1, r3
 8005a66:	2208      	movs	r2, #8
 8005a68:	305c      	adds	r0, #92	@ 0x5c
 8005a6a:	f000 fa2d 	bl	8005ec8 <memset>
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <std+0x58>)
 8005a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a72:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa8 <std+0x5c>)
 8005a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a76:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <std+0x60>)
 8005a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <std+0x64>)
 8005a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x68>)
 8005a80:	6224      	str	r4, [r4, #32]
 8005a82:	429c      	cmp	r4, r3
 8005a84:	d006      	beq.n	8005a94 <std+0x48>
 8005a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a8a:	4294      	cmp	r4, r2
 8005a8c:	d002      	beq.n	8005a94 <std+0x48>
 8005a8e:	33d0      	adds	r3, #208	@ 0xd0
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d105      	bne.n	8005aa0 <std+0x54>
 8005a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a9c:	f000 ba8c 	b.w	8005fb8 <__retarget_lock_init_recursive>
 8005aa0:	bd10      	pop	{r4, pc}
 8005aa2:	bf00      	nop
 8005aa4:	08005d19 	.word	0x08005d19
 8005aa8:	08005d3b 	.word	0x08005d3b
 8005aac:	08005d73 	.word	0x08005d73
 8005ab0:	08005d97 	.word	0x08005d97
 8005ab4:	200002b8 	.word	0x200002b8

08005ab8 <stdio_exit_handler>:
 8005ab8:	4a02      	ldr	r2, [pc, #8]	@ (8005ac4 <stdio_exit_handler+0xc>)
 8005aba:	4903      	ldr	r1, [pc, #12]	@ (8005ac8 <stdio_exit_handler+0x10>)
 8005abc:	4803      	ldr	r0, [pc, #12]	@ (8005acc <stdio_exit_handler+0x14>)
 8005abe:	f000 b869 	b.w	8005b94 <_fwalk_sglue>
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
 8005ac8:	08006b09 	.word	0x08006b09
 8005acc:	2000001c 	.word	0x2000001c

08005ad0 <cleanup_stdio>:
 8005ad0:	6841      	ldr	r1, [r0, #4]
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <cleanup_stdio+0x34>)
 8005ad4:	4299      	cmp	r1, r3
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	d001      	beq.n	8005ae0 <cleanup_stdio+0x10>
 8005adc:	f001 f814 	bl	8006b08 <_fflush_r>
 8005ae0:	68a1      	ldr	r1, [r4, #8]
 8005ae2:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <cleanup_stdio+0x38>)
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	d002      	beq.n	8005aee <cleanup_stdio+0x1e>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f001 f80d 	bl	8006b08 <_fflush_r>
 8005aee:	68e1      	ldr	r1, [r4, #12]
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <cleanup_stdio+0x3c>)
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d004      	beq.n	8005b00 <cleanup_stdio+0x30>
 8005af6:	4620      	mov	r0, r4
 8005af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afc:	f001 b804 	b.w	8006b08 <_fflush_r>
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop
 8005b04:	200002b8 	.word	0x200002b8
 8005b08:	20000320 	.word	0x20000320
 8005b0c:	20000388 	.word	0x20000388

08005b10 <global_stdio_init.part.0>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <global_stdio_init.part.0+0x30>)
 8005b14:	4c0b      	ldr	r4, [pc, #44]	@ (8005b44 <global_stdio_init.part.0+0x34>)
 8005b16:	4a0c      	ldr	r2, [pc, #48]	@ (8005b48 <global_stdio_init.part.0+0x38>)
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2104      	movs	r1, #4
 8005b20:	f7ff ff94 	bl	8005a4c <std>
 8005b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2109      	movs	r1, #9
 8005b2c:	f7ff ff8e 	bl	8005a4c <std>
 8005b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b34:	2202      	movs	r2, #2
 8005b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b3a:	2112      	movs	r1, #18
 8005b3c:	f7ff bf86 	b.w	8005a4c <std>
 8005b40:	200003f0 	.word	0x200003f0
 8005b44:	200002b8 	.word	0x200002b8
 8005b48:	08005ab9 	.word	0x08005ab9

08005b4c <__sfp_lock_acquire>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	@ (8005b54 <__sfp_lock_acquire+0x8>)
 8005b4e:	f000 ba34 	b.w	8005fba <__retarget_lock_acquire_recursive>
 8005b52:	bf00      	nop
 8005b54:	200003f9 	.word	0x200003f9

08005b58 <__sfp_lock_release>:
 8005b58:	4801      	ldr	r0, [pc, #4]	@ (8005b60 <__sfp_lock_release+0x8>)
 8005b5a:	f000 ba2f 	b.w	8005fbc <__retarget_lock_release_recursive>
 8005b5e:	bf00      	nop
 8005b60:	200003f9 	.word	0x200003f9

08005b64 <__sinit>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4604      	mov	r4, r0
 8005b68:	f7ff fff0 	bl	8005b4c <__sfp_lock_acquire>
 8005b6c:	6a23      	ldr	r3, [r4, #32]
 8005b6e:	b11b      	cbz	r3, 8005b78 <__sinit+0x14>
 8005b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b74:	f7ff bff0 	b.w	8005b58 <__sfp_lock_release>
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <__sinit+0x28>)
 8005b7a:	6223      	str	r3, [r4, #32]
 8005b7c:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <__sinit+0x2c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f5      	bne.n	8005b70 <__sinit+0xc>
 8005b84:	f7ff ffc4 	bl	8005b10 <global_stdio_init.part.0>
 8005b88:	e7f2      	b.n	8005b70 <__sinit+0xc>
 8005b8a:	bf00      	nop
 8005b8c:	08005ad1 	.word	0x08005ad1
 8005b90:	200003f0 	.word	0x200003f0

08005b94 <_fwalk_sglue>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4688      	mov	r8, r1
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	2600      	movs	r6, #0
 8005ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba8:	d505      	bpl.n	8005bb6 <_fwalk_sglue+0x22>
 8005baa:	6824      	ldr	r4, [r4, #0]
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	d1f7      	bne.n	8005ba0 <_fwalk_sglue+0xc>
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb6:	89ab      	ldrh	r3, [r5, #12]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d907      	bls.n	8005bcc <_fwalk_sglue+0x38>
 8005bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	d003      	beq.n	8005bcc <_fwalk_sglue+0x38>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	47c0      	blx	r8
 8005bca:	4306      	orrs	r6, r0
 8005bcc:	3568      	adds	r5, #104	@ 0x68
 8005bce:	e7e9      	b.n	8005ba4 <_fwalk_sglue+0x10>

08005bd0 <iprintf>:
 8005bd0:	b40f      	push	{r0, r1, r2, r3}
 8005bd2:	b507      	push	{r0, r1, r2, lr}
 8005bd4:	4906      	ldr	r1, [pc, #24]	@ (8005bf0 <iprintf+0x20>)
 8005bd6:	ab04      	add	r3, sp, #16
 8005bd8:	6808      	ldr	r0, [r1, #0]
 8005bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bde:	6881      	ldr	r1, [r0, #8]
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	f000 fc67 	bl	80064b4 <_vfiprintf_r>
 8005be6:	b003      	add	sp, #12
 8005be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bec:	b004      	add	sp, #16
 8005bee:	4770      	bx	lr
 8005bf0:	20000018 	.word	0x20000018

08005bf4 <_puts_r>:
 8005bf4:	6a03      	ldr	r3, [r0, #32]
 8005bf6:	b570      	push	{r4, r5, r6, lr}
 8005bf8:	6884      	ldr	r4, [r0, #8]
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	b90b      	cbnz	r3, 8005c04 <_puts_r+0x10>
 8005c00:	f7ff ffb0 	bl	8005b64 <__sinit>
 8005c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c06:	07db      	lsls	r3, r3, #31
 8005c08:	d405      	bmi.n	8005c16 <_puts_r+0x22>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	0598      	lsls	r0, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_puts_r+0x22>
 8005c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c12:	f000 f9d2 	bl	8005fba <__retarget_lock_acquire_recursive>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	0719      	lsls	r1, r3, #28
 8005c1a:	d502      	bpl.n	8005c22 <_puts_r+0x2e>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d135      	bne.n	8005c8e <_puts_r+0x9a>
 8005c22:	4621      	mov	r1, r4
 8005c24:	4628      	mov	r0, r5
 8005c26:	f000 f8f9 	bl	8005e1c <__swsetup_r>
 8005c2a:	b380      	cbz	r0, 8005c8e <_puts_r+0x9a>
 8005c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c32:	07da      	lsls	r2, r3, #31
 8005c34:	d405      	bmi.n	8005c42 <_puts_r+0x4e>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	059b      	lsls	r3, r3, #22
 8005c3a:	d402      	bmi.n	8005c42 <_puts_r+0x4e>
 8005c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c3e:	f000 f9bd 	bl	8005fbc <__retarget_lock_release_recursive>
 8005c42:	4628      	mov	r0, r5
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	da04      	bge.n	8005c54 <_puts_r+0x60>
 8005c4a:	69a2      	ldr	r2, [r4, #24]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	dc17      	bgt.n	8005c80 <_puts_r+0x8c>
 8005c50:	290a      	cmp	r1, #10
 8005c52:	d015      	beq.n	8005c80 <_puts_r+0x8c>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	7019      	strb	r1, [r3, #0]
 8005c5c:	68a3      	ldr	r3, [r4, #8]
 8005c5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c62:	3b01      	subs	r3, #1
 8005c64:	60a3      	str	r3, [r4, #8]
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d1ed      	bne.n	8005c46 <_puts_r+0x52>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da11      	bge.n	8005c92 <_puts_r+0x9e>
 8005c6e:	4622      	mov	r2, r4
 8005c70:	210a      	movs	r1, #10
 8005c72:	4628      	mov	r0, r5
 8005c74:	f000 f893 	bl	8005d9e <__swbuf_r>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d0d7      	beq.n	8005c2c <_puts_r+0x38>
 8005c7c:	250a      	movs	r5, #10
 8005c7e:	e7d7      	b.n	8005c30 <_puts_r+0x3c>
 8005c80:	4622      	mov	r2, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f88b 	bl	8005d9e <__swbuf_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d1e7      	bne.n	8005c5c <_puts_r+0x68>
 8005c8c:	e7ce      	b.n	8005c2c <_puts_r+0x38>
 8005c8e:	3e01      	subs	r6, #1
 8005c90:	e7e4      	b.n	8005c5c <_puts_r+0x68>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	220a      	movs	r2, #10
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e7ee      	b.n	8005c7c <_puts_r+0x88>
	...

08005ca0 <puts>:
 8005ca0:	4b02      	ldr	r3, [pc, #8]	@ (8005cac <puts+0xc>)
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	f7ff bfa5 	b.w	8005bf4 <_puts_r>
 8005caa:	bf00      	nop
 8005cac:	20000018 	.word	0x20000018

08005cb0 <sniprintf>:
 8005cb0:	b40c      	push	{r2, r3}
 8005cb2:	b530      	push	{r4, r5, lr}
 8005cb4:	4b17      	ldr	r3, [pc, #92]	@ (8005d14 <sniprintf+0x64>)
 8005cb6:	1e0c      	subs	r4, r1, #0
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	b09d      	sub	sp, #116	@ 0x74
 8005cbc:	da08      	bge.n	8005cd0 <sniprintf+0x20>
 8005cbe:	238b      	movs	r3, #139	@ 0x8b
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc6:	b01d      	add	sp, #116	@ 0x74
 8005cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ccc:	b002      	add	sp, #8
 8005cce:	4770      	bx	lr
 8005cd0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005cd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cd8:	bf14      	ite	ne
 8005cda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cde:	4623      	moveq	r3, r4
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	9006      	str	r0, [sp, #24]
 8005cec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cf0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cf2:	ab21      	add	r3, sp, #132	@ 0x84
 8005cf4:	a902      	add	r1, sp, #8
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	f000 fab5 	bl	8006268 <_svfiprintf_r>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	bfbc      	itt	lt
 8005d02:	238b      	movlt	r3, #139	@ 0x8b
 8005d04:	602b      	strlt	r3, [r5, #0]
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	d0dd      	beq.n	8005cc6 <sniprintf+0x16>
 8005d0a:	9b02      	ldr	r3, [sp, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e7d9      	b.n	8005cc6 <sniprintf+0x16>
 8005d12:	bf00      	nop
 8005d14:	20000018 	.word	0x20000018

08005d18 <__sread>:
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	f000 f8fc 	bl	8005f1c <_read_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	bfab      	itete	ge
 8005d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d2c:	181b      	addge	r3, r3, r0
 8005d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d32:	bfac      	ite	ge
 8005d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d36:	81a3      	strhlt	r3, [r4, #12]
 8005d38:	bd10      	pop	{r4, pc}

08005d3a <__swrite>:
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	461f      	mov	r7, r3
 8005d40:	898b      	ldrh	r3, [r1, #12]
 8005d42:	05db      	lsls	r3, r3, #23
 8005d44:	4605      	mov	r5, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4616      	mov	r6, r2
 8005d4a:	d505      	bpl.n	8005d58 <__swrite+0x1e>
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2302      	movs	r3, #2
 8005d52:	2200      	movs	r2, #0
 8005d54:	f000 f8d0 	bl	8005ef8 <_lseek_r>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4628      	mov	r0, r5
 8005d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	f000 b8e7 	b.w	8005f40 <_write_r>

08005d72 <__sseek>:
 8005d72:	b510      	push	{r4, lr}
 8005d74:	460c      	mov	r4, r1
 8005d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7a:	f000 f8bd 	bl	8005ef8 <_lseek_r>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	bf15      	itete	ne
 8005d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d8e:	81a3      	strheq	r3, [r4, #12]
 8005d90:	bf18      	it	ne
 8005d92:	81a3      	strhne	r3, [r4, #12]
 8005d94:	bd10      	pop	{r4, pc}

08005d96 <__sclose>:
 8005d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9a:	f000 b89d 	b.w	8005ed8 <_close_r>

08005d9e <__swbuf_r>:
 8005d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da0:	460e      	mov	r6, r1
 8005da2:	4614      	mov	r4, r2
 8005da4:	4605      	mov	r5, r0
 8005da6:	b118      	cbz	r0, 8005db0 <__swbuf_r+0x12>
 8005da8:	6a03      	ldr	r3, [r0, #32]
 8005daa:	b90b      	cbnz	r3, 8005db0 <__swbuf_r+0x12>
 8005dac:	f7ff feda 	bl	8005b64 <__sinit>
 8005db0:	69a3      	ldr	r3, [r4, #24]
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	071a      	lsls	r2, r3, #28
 8005db8:	d501      	bpl.n	8005dbe <__swbuf_r+0x20>
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	b943      	cbnz	r3, 8005dd0 <__swbuf_r+0x32>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f82b 	bl	8005e1c <__swsetup_r>
 8005dc6:	b118      	cbz	r0, 8005dd0 <__swbuf_r+0x32>
 8005dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dcc:	4638      	mov	r0, r7
 8005dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	6922      	ldr	r2, [r4, #16]
 8005dd4:	1a98      	subs	r0, r3, r2
 8005dd6:	6963      	ldr	r3, [r4, #20]
 8005dd8:	b2f6      	uxtb	r6, r6
 8005dda:	4283      	cmp	r3, r0
 8005ddc:	4637      	mov	r7, r6
 8005dde:	dc05      	bgt.n	8005dec <__swbuf_r+0x4e>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 fe90 	bl	8006b08 <_fflush_r>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1ed      	bne.n	8005dc8 <__swbuf_r+0x2a>
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	701e      	strb	r6, [r3, #0]
 8005dfa:	6962      	ldr	r2, [r4, #20]
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d004      	beq.n	8005e0c <__swbuf_r+0x6e>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	07db      	lsls	r3, r3, #31
 8005e06:	d5e1      	bpl.n	8005dcc <__swbuf_r+0x2e>
 8005e08:	2e0a      	cmp	r6, #10
 8005e0a:	d1df      	bne.n	8005dcc <__swbuf_r+0x2e>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 fe7a 	bl	8006b08 <_fflush_r>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d0d9      	beq.n	8005dcc <__swbuf_r+0x2e>
 8005e18:	e7d6      	b.n	8005dc8 <__swbuf_r+0x2a>
	...

08005e1c <__swsetup_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ec4 <__swsetup_r+0xa8>)
 8005e20:	4605      	mov	r5, r0
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	460c      	mov	r4, r1
 8005e26:	b118      	cbz	r0, 8005e30 <__swsetup_r+0x14>
 8005e28:	6a03      	ldr	r3, [r0, #32]
 8005e2a:	b90b      	cbnz	r3, 8005e30 <__swsetup_r+0x14>
 8005e2c:	f7ff fe9a 	bl	8005b64 <__sinit>
 8005e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e34:	0719      	lsls	r1, r3, #28
 8005e36:	d422      	bmi.n	8005e7e <__swsetup_r+0x62>
 8005e38:	06da      	lsls	r2, r3, #27
 8005e3a:	d407      	bmi.n	8005e4c <__swsetup_r+0x30>
 8005e3c:	2209      	movs	r2, #9
 8005e3e:	602a      	str	r2, [r5, #0]
 8005e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4a:	e033      	b.n	8005eb4 <__swsetup_r+0x98>
 8005e4c:	0758      	lsls	r0, r3, #29
 8005e4e:	d512      	bpl.n	8005e76 <__swsetup_r+0x5a>
 8005e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e52:	b141      	cbz	r1, 8005e66 <__swsetup_r+0x4a>
 8005e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d002      	beq.n	8005e62 <__swsetup_r+0x46>
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f8af 	bl	8005fc0 <_free_r>
 8005e62:	2300      	movs	r3, #0
 8005e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6063      	str	r3, [r4, #4]
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f043 0308 	orr.w	r3, r3, #8
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	b94b      	cbnz	r3, 8005e96 <__swsetup_r+0x7a>
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8c:	d003      	beq.n	8005e96 <__swsetup_r+0x7a>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fe87 	bl	8006ba4 <__smakebuf_r>
 8005e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9a:	f013 0201 	ands.w	r2, r3, #1
 8005e9e:	d00a      	beq.n	8005eb6 <__swsetup_r+0x9a>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	60a2      	str	r2, [r4, #8]
 8005ea4:	6962      	ldr	r2, [r4, #20]
 8005ea6:	4252      	negs	r2, r2
 8005ea8:	61a2      	str	r2, [r4, #24]
 8005eaa:	6922      	ldr	r2, [r4, #16]
 8005eac:	b942      	cbnz	r2, 8005ec0 <__swsetup_r+0xa4>
 8005eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005eb2:	d1c5      	bne.n	8005e40 <__swsetup_r+0x24>
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	0799      	lsls	r1, r3, #30
 8005eb8:	bf58      	it	pl
 8005eba:	6962      	ldrpl	r2, [r4, #20]
 8005ebc:	60a2      	str	r2, [r4, #8]
 8005ebe:	e7f4      	b.n	8005eaa <__swsetup_r+0x8e>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e7f7      	b.n	8005eb4 <__swsetup_r+0x98>
 8005ec4:	20000018 	.word	0x20000018

08005ec8 <memset>:
 8005ec8:	4402      	add	r2, r0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d100      	bne.n	8005ed2 <memset+0xa>
 8005ed0:	4770      	bx	lr
 8005ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed6:	e7f9      	b.n	8005ecc <memset+0x4>

08005ed8 <_close_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d06      	ldr	r5, [pc, #24]	@ (8005ef4 <_close_r+0x1c>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fb fb15 	bl	8001512 <_close>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_close_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_close_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	200003f4 	.word	0x200003f4

08005ef8 <_lseek_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	@ (8005f18 <_lseek_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fb fb2a 	bl	8001560 <_lseek>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_lseek_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_lseek_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200003f4 	.word	0x200003f4

08005f1c <_read_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	@ (8005f3c <_read_r+0x20>)
 8005f20:	4604      	mov	r4, r0
 8005f22:	4608      	mov	r0, r1
 8005f24:	4611      	mov	r1, r2
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f7fb fab8 	bl	80014a0 <_read>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_read_r+0x1e>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_read_r+0x1e>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	200003f4 	.word	0x200003f4

08005f40 <_write_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	@ (8005f60 <_write_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fb fac3 	bl	80014da <_write>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_write_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_write_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200003f4 	.word	0x200003f4

08005f64 <__errno>:
 8005f64:	4b01      	ldr	r3, [pc, #4]	@ (8005f6c <__errno+0x8>)
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000018 	.word	0x20000018

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa8 <__libc_init_array+0x38>)
 8005f74:	4c0d      	ldr	r4, [pc, #52]	@ (8005fac <__libc_init_array+0x3c>)
 8005f76:	1b64      	subs	r4, r4, r5
 8005f78:	10a4      	asrs	r4, r4, #2
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	4d0b      	ldr	r5, [pc, #44]	@ (8005fb0 <__libc_init_array+0x40>)
 8005f82:	4c0c      	ldr	r4, [pc, #48]	@ (8005fb4 <__libc_init_array+0x44>)
 8005f84:	f000 feda 	bl	8006d3c <_init>
 8005f88:	1b64      	subs	r4, r4, r5
 8005f8a:	10a4      	asrs	r4, r4, #2
 8005f8c:	2600      	movs	r6, #0
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	08006e94 	.word	0x08006e94
 8005fac:	08006e94 	.word	0x08006e94
 8005fb0:	08006e94 	.word	0x08006e94
 8005fb4:	08006e98 	.word	0x08006e98

08005fb8 <__retarget_lock_init_recursive>:
 8005fb8:	4770      	bx	lr

08005fba <__retarget_lock_acquire_recursive>:
 8005fba:	4770      	bx	lr

08005fbc <__retarget_lock_release_recursive>:
 8005fbc:	4770      	bx	lr
	...

08005fc0 <_free_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d041      	beq.n	800604c <_free_r+0x8c>
 8005fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fcc:	1f0c      	subs	r4, r1, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfb8      	it	lt
 8005fd2:	18e4      	addlt	r4, r4, r3
 8005fd4:	f000 f8e0 	bl	8006198 <__malloc_lock>
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <_free_r+0x90>)
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	b933      	cbnz	r3, 8005fec <_free_r+0x2c>
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	6014      	str	r4, [r2, #0]
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe8:	f000 b8dc 	b.w	80061a4 <__malloc_unlock>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d908      	bls.n	8006002 <_free_r+0x42>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	1821      	adds	r1, r4, r0
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	bf01      	itttt	eq
 8005ff8:	6819      	ldreq	r1, [r3, #0]
 8005ffa:	685b      	ldreq	r3, [r3, #4]
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	e7ed      	b.n	8005fde <_free_r+0x1e>
 8006002:	461a      	mov	r2, r3
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b10b      	cbz	r3, 800600c <_free_r+0x4c>
 8006008:	42a3      	cmp	r3, r4
 800600a:	d9fa      	bls.n	8006002 <_free_r+0x42>
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	1850      	adds	r0, r2, r1
 8006010:	42a0      	cmp	r0, r4
 8006012:	d10b      	bne.n	800602c <_free_r+0x6c>
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	4401      	add	r1, r0
 8006018:	1850      	adds	r0, r2, r1
 800601a:	4283      	cmp	r3, r0
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	d1e0      	bne.n	8005fe2 <_free_r+0x22>
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	4408      	add	r0, r1
 8006028:	6010      	str	r0, [r2, #0]
 800602a:	e7da      	b.n	8005fe2 <_free_r+0x22>
 800602c:	d902      	bls.n	8006034 <_free_r+0x74>
 800602e:	230c      	movs	r3, #12
 8006030:	602b      	str	r3, [r5, #0]
 8006032:	e7d6      	b.n	8005fe2 <_free_r+0x22>
 8006034:	6820      	ldr	r0, [r4, #0]
 8006036:	1821      	adds	r1, r4, r0
 8006038:	428b      	cmp	r3, r1
 800603a:	bf04      	itt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	bf04      	itt	eq
 8006044:	1809      	addeq	r1, r1, r0
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	6054      	str	r4, [r2, #4]
 800604a:	e7ca      	b.n	8005fe2 <_free_r+0x22>
 800604c:	bd38      	pop	{r3, r4, r5, pc}
 800604e:	bf00      	nop
 8006050:	20000400 	.word	0x20000400

08006054 <sbrk_aligned>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4e0f      	ldr	r6, [pc, #60]	@ (8006094 <sbrk_aligned+0x40>)
 8006058:	460c      	mov	r4, r1
 800605a:	6831      	ldr	r1, [r6, #0]
 800605c:	4605      	mov	r5, r0
 800605e:	b911      	cbnz	r1, 8006066 <sbrk_aligned+0x12>
 8006060:	f000 fe18 	bl	8006c94 <_sbrk_r>
 8006064:	6030      	str	r0, [r6, #0]
 8006066:	4621      	mov	r1, r4
 8006068:	4628      	mov	r0, r5
 800606a:	f000 fe13 	bl	8006c94 <_sbrk_r>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	d103      	bne.n	800607a <sbrk_aligned+0x26>
 8006072:	f04f 34ff 	mov.w	r4, #4294967295
 8006076:	4620      	mov	r0, r4
 8006078:	bd70      	pop	{r4, r5, r6, pc}
 800607a:	1cc4      	adds	r4, r0, #3
 800607c:	f024 0403 	bic.w	r4, r4, #3
 8006080:	42a0      	cmp	r0, r4
 8006082:	d0f8      	beq.n	8006076 <sbrk_aligned+0x22>
 8006084:	1a21      	subs	r1, r4, r0
 8006086:	4628      	mov	r0, r5
 8006088:	f000 fe04 	bl	8006c94 <_sbrk_r>
 800608c:	3001      	adds	r0, #1
 800608e:	d1f2      	bne.n	8006076 <sbrk_aligned+0x22>
 8006090:	e7ef      	b.n	8006072 <sbrk_aligned+0x1e>
 8006092:	bf00      	nop
 8006094:	200003fc 	.word	0x200003fc

08006098 <_malloc_r>:
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4606      	mov	r6, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d904      	bls.n	80060be <_malloc_r+0x26>
 80060b4:	230c      	movs	r3, #12
 80060b6:	6033      	str	r3, [r6, #0]
 80060b8:	2000      	movs	r0, #0
 80060ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006194 <_malloc_r+0xfc>
 80060c2:	f000 f869 	bl	8006198 <__malloc_lock>
 80060c6:	f8d8 3000 	ldr.w	r3, [r8]
 80060ca:	461c      	mov	r4, r3
 80060cc:	bb44      	cbnz	r4, 8006120 <_malloc_r+0x88>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff ffbf 	bl	8006054 <sbrk_aligned>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	4604      	mov	r4, r0
 80060da:	d158      	bne.n	800618e <_malloc_r+0xf6>
 80060dc:	f8d8 4000 	ldr.w	r4, [r8]
 80060e0:	4627      	mov	r7, r4
 80060e2:	2f00      	cmp	r7, #0
 80060e4:	d143      	bne.n	800616e <_malloc_r+0xd6>
 80060e6:	2c00      	cmp	r4, #0
 80060e8:	d04b      	beq.n	8006182 <_malloc_r+0xea>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	4639      	mov	r1, r7
 80060ee:	4630      	mov	r0, r6
 80060f0:	eb04 0903 	add.w	r9, r4, r3
 80060f4:	f000 fdce 	bl	8006c94 <_sbrk_r>
 80060f8:	4581      	cmp	r9, r0
 80060fa:	d142      	bne.n	8006182 <_malloc_r+0xea>
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	1a6d      	subs	r5, r5, r1
 8006100:	4629      	mov	r1, r5
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ffa6 	bl	8006054 <sbrk_aligned>
 8006108:	3001      	adds	r0, #1
 800610a:	d03a      	beq.n	8006182 <_malloc_r+0xea>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	442b      	add	r3, r5
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	f8d8 3000 	ldr.w	r3, [r8]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	bb62      	cbnz	r2, 8006174 <_malloc_r+0xdc>
 800611a:	f8c8 7000 	str.w	r7, [r8]
 800611e:	e00f      	b.n	8006140 <_malloc_r+0xa8>
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	1b52      	subs	r2, r2, r5
 8006124:	d420      	bmi.n	8006168 <_malloc_r+0xd0>
 8006126:	2a0b      	cmp	r2, #11
 8006128:	d917      	bls.n	800615a <_malloc_r+0xc2>
 800612a:	1961      	adds	r1, r4, r5
 800612c:	42a3      	cmp	r3, r4
 800612e:	6025      	str	r5, [r4, #0]
 8006130:	bf18      	it	ne
 8006132:	6059      	strne	r1, [r3, #4]
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	bf08      	it	eq
 8006138:	f8c8 1000 	streq.w	r1, [r8]
 800613c:	5162      	str	r2, [r4, r5]
 800613e:	604b      	str	r3, [r1, #4]
 8006140:	4630      	mov	r0, r6
 8006142:	f000 f82f 	bl	80061a4 <__malloc_unlock>
 8006146:	f104 000b 	add.w	r0, r4, #11
 800614a:	1d23      	adds	r3, r4, #4
 800614c:	f020 0007 	bic.w	r0, r0, #7
 8006150:	1ac2      	subs	r2, r0, r3
 8006152:	bf1c      	itt	ne
 8006154:	1a1b      	subne	r3, r3, r0
 8006156:	50a3      	strne	r3, [r4, r2]
 8006158:	e7af      	b.n	80060ba <_malloc_r+0x22>
 800615a:	6862      	ldr	r2, [r4, #4]
 800615c:	42a3      	cmp	r3, r4
 800615e:	bf0c      	ite	eq
 8006160:	f8c8 2000 	streq.w	r2, [r8]
 8006164:	605a      	strne	r2, [r3, #4]
 8006166:	e7eb      	b.n	8006140 <_malloc_r+0xa8>
 8006168:	4623      	mov	r3, r4
 800616a:	6864      	ldr	r4, [r4, #4]
 800616c:	e7ae      	b.n	80060cc <_malloc_r+0x34>
 800616e:	463c      	mov	r4, r7
 8006170:	687f      	ldr	r7, [r7, #4]
 8006172:	e7b6      	b.n	80060e2 <_malloc_r+0x4a>
 8006174:	461a      	mov	r2, r3
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	42a3      	cmp	r3, r4
 800617a:	d1fb      	bne.n	8006174 <_malloc_r+0xdc>
 800617c:	2300      	movs	r3, #0
 800617e:	6053      	str	r3, [r2, #4]
 8006180:	e7de      	b.n	8006140 <_malloc_r+0xa8>
 8006182:	230c      	movs	r3, #12
 8006184:	6033      	str	r3, [r6, #0]
 8006186:	4630      	mov	r0, r6
 8006188:	f000 f80c 	bl	80061a4 <__malloc_unlock>
 800618c:	e794      	b.n	80060b8 <_malloc_r+0x20>
 800618e:	6005      	str	r5, [r0, #0]
 8006190:	e7d6      	b.n	8006140 <_malloc_r+0xa8>
 8006192:	bf00      	nop
 8006194:	20000400 	.word	0x20000400

08006198 <__malloc_lock>:
 8006198:	4801      	ldr	r0, [pc, #4]	@ (80061a0 <__malloc_lock+0x8>)
 800619a:	f7ff bf0e 	b.w	8005fba <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	200003f8 	.word	0x200003f8

080061a4 <__malloc_unlock>:
 80061a4:	4801      	ldr	r0, [pc, #4]	@ (80061ac <__malloc_unlock+0x8>)
 80061a6:	f7ff bf09 	b.w	8005fbc <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	200003f8 	.word	0x200003f8

080061b0 <__ssputs_r>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	688e      	ldr	r6, [r1, #8]
 80061b6:	461f      	mov	r7, r3
 80061b8:	42be      	cmp	r6, r7
 80061ba:	680b      	ldr	r3, [r1, #0]
 80061bc:	4682      	mov	sl, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	4690      	mov	r8, r2
 80061c2:	d82d      	bhi.n	8006220 <__ssputs_r+0x70>
 80061c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061cc:	d026      	beq.n	800621c <__ssputs_r+0x6c>
 80061ce:	6965      	ldr	r5, [r4, #20]
 80061d0:	6909      	ldr	r1, [r1, #16]
 80061d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d6:	eba3 0901 	sub.w	r9, r3, r1
 80061da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061de:	1c7b      	adds	r3, r7, #1
 80061e0:	444b      	add	r3, r9
 80061e2:	106d      	asrs	r5, r5, #1
 80061e4:	429d      	cmp	r5, r3
 80061e6:	bf38      	it	cc
 80061e8:	461d      	movcc	r5, r3
 80061ea:	0553      	lsls	r3, r2, #21
 80061ec:	d527      	bpl.n	800623e <__ssputs_r+0x8e>
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7ff ff52 	bl	8006098 <_malloc_r>
 80061f4:	4606      	mov	r6, r0
 80061f6:	b360      	cbz	r0, 8006252 <__ssputs_r+0xa2>
 80061f8:	6921      	ldr	r1, [r4, #16]
 80061fa:	464a      	mov	r2, r9
 80061fc:	f000 fd5a 	bl	8006cb4 <memcpy>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	6126      	str	r6, [r4, #16]
 800620e:	6165      	str	r5, [r4, #20]
 8006210:	444e      	add	r6, r9
 8006212:	eba5 0509 	sub.w	r5, r5, r9
 8006216:	6026      	str	r6, [r4, #0]
 8006218:	60a5      	str	r5, [r4, #8]
 800621a:	463e      	mov	r6, r7
 800621c:	42be      	cmp	r6, r7
 800621e:	d900      	bls.n	8006222 <__ssputs_r+0x72>
 8006220:	463e      	mov	r6, r7
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	4632      	mov	r2, r6
 8006226:	4641      	mov	r1, r8
 8006228:	f000 fcf8 	bl	8006c1c <memmove>
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	1b9b      	subs	r3, r3, r6
 8006230:	60a3      	str	r3, [r4, #8]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	4433      	add	r3, r6
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	2000      	movs	r0, #0
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	462a      	mov	r2, r5
 8006240:	f000 fd46 	bl	8006cd0 <_realloc_r>
 8006244:	4606      	mov	r6, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d1e0      	bne.n	800620c <__ssputs_r+0x5c>
 800624a:	6921      	ldr	r1, [r4, #16]
 800624c:	4650      	mov	r0, sl
 800624e:	f7ff feb7 	bl	8005fc0 <_free_r>
 8006252:	230c      	movs	r3, #12
 8006254:	f8ca 3000 	str.w	r3, [sl]
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e7e9      	b.n	800623a <__ssputs_r+0x8a>
	...

08006268 <_svfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	4698      	mov	r8, r3
 800626e:	898b      	ldrh	r3, [r1, #12]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	b09d      	sub	sp, #116	@ 0x74
 8006274:	4607      	mov	r7, r0
 8006276:	460d      	mov	r5, r1
 8006278:	4614      	mov	r4, r2
 800627a:	d510      	bpl.n	800629e <_svfiprintf_r+0x36>
 800627c:	690b      	ldr	r3, [r1, #16]
 800627e:	b973      	cbnz	r3, 800629e <_svfiprintf_r+0x36>
 8006280:	2140      	movs	r1, #64	@ 0x40
 8006282:	f7ff ff09 	bl	8006098 <_malloc_r>
 8006286:	6028      	str	r0, [r5, #0]
 8006288:	6128      	str	r0, [r5, #16]
 800628a:	b930      	cbnz	r0, 800629a <_svfiprintf_r+0x32>
 800628c:	230c      	movs	r3, #12
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	b01d      	add	sp, #116	@ 0x74
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	2340      	movs	r3, #64	@ 0x40
 800629c:	616b      	str	r3, [r5, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a2:	2320      	movs	r3, #32
 80062a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ac:	2330      	movs	r3, #48	@ 0x30
 80062ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800644c <_svfiprintf_r+0x1e4>
 80062b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062b6:	f04f 0901 	mov.w	r9, #1
 80062ba:	4623      	mov	r3, r4
 80062bc:	469a      	mov	sl, r3
 80062be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c2:	b10a      	cbz	r2, 80062c8 <_svfiprintf_r+0x60>
 80062c4:	2a25      	cmp	r2, #37	@ 0x25
 80062c6:	d1f9      	bne.n	80062bc <_svfiprintf_r+0x54>
 80062c8:	ebba 0b04 	subs.w	fp, sl, r4
 80062cc:	d00b      	beq.n	80062e6 <_svfiprintf_r+0x7e>
 80062ce:	465b      	mov	r3, fp
 80062d0:	4622      	mov	r2, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ff6b 	bl	80061b0 <__ssputs_r>
 80062da:	3001      	adds	r0, #1
 80062dc:	f000 80a7 	beq.w	800642e <_svfiprintf_r+0x1c6>
 80062e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062e2:	445a      	add	r2, fp
 80062e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 809f 	beq.w	800642e <_svfiprintf_r+0x1c6>
 80062f0:	2300      	movs	r3, #0
 80062f2:	f04f 32ff 	mov.w	r2, #4294967295
 80062f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fa:	f10a 0a01 	add.w	sl, sl, #1
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006306:	931a      	str	r3, [sp, #104]	@ 0x68
 8006308:	4654      	mov	r4, sl
 800630a:	2205      	movs	r2, #5
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	484e      	ldr	r0, [pc, #312]	@ (800644c <_svfiprintf_r+0x1e4>)
 8006312:	f7f9 ff6d 	bl	80001f0 <memchr>
 8006316:	9a04      	ldr	r2, [sp, #16]
 8006318:	b9d8      	cbnz	r0, 8006352 <_svfiprintf_r+0xea>
 800631a:	06d0      	lsls	r0, r2, #27
 800631c:	bf44      	itt	mi
 800631e:	2320      	movmi	r3, #32
 8006320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006324:	0711      	lsls	r1, r2, #28
 8006326:	bf44      	itt	mi
 8006328:	232b      	movmi	r3, #43	@ 0x2b
 800632a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800632e:	f89a 3000 	ldrb.w	r3, [sl]
 8006332:	2b2a      	cmp	r3, #42	@ 0x2a
 8006334:	d015      	beq.n	8006362 <_svfiprintf_r+0xfa>
 8006336:	9a07      	ldr	r2, [sp, #28]
 8006338:	4654      	mov	r4, sl
 800633a:	2000      	movs	r0, #0
 800633c:	f04f 0c0a 	mov.w	ip, #10
 8006340:	4621      	mov	r1, r4
 8006342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006346:	3b30      	subs	r3, #48	@ 0x30
 8006348:	2b09      	cmp	r3, #9
 800634a:	d94b      	bls.n	80063e4 <_svfiprintf_r+0x17c>
 800634c:	b1b0      	cbz	r0, 800637c <_svfiprintf_r+0x114>
 800634e:	9207      	str	r2, [sp, #28]
 8006350:	e014      	b.n	800637c <_svfiprintf_r+0x114>
 8006352:	eba0 0308 	sub.w	r3, r0, r8
 8006356:	fa09 f303 	lsl.w	r3, r9, r3
 800635a:	4313      	orrs	r3, r2
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	46a2      	mov	sl, r4
 8006360:	e7d2      	b.n	8006308 <_svfiprintf_r+0xa0>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	1d19      	adds	r1, r3, #4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	9103      	str	r1, [sp, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfbb      	ittet	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	f042 0202 	orrlt.w	r2, r2, #2
 8006374:	9307      	strge	r3, [sp, #28]
 8006376:	9307      	strlt	r3, [sp, #28]
 8006378:	bfb8      	it	lt
 800637a:	9204      	strlt	r2, [sp, #16]
 800637c:	7823      	ldrb	r3, [r4, #0]
 800637e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006380:	d10a      	bne.n	8006398 <_svfiprintf_r+0x130>
 8006382:	7863      	ldrb	r3, [r4, #1]
 8006384:	2b2a      	cmp	r3, #42	@ 0x2a
 8006386:	d132      	bne.n	80063ee <_svfiprintf_r+0x186>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	9203      	str	r2, [sp, #12]
 8006390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006394:	3402      	adds	r4, #2
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800645c <_svfiprintf_r+0x1f4>
 800639c:	7821      	ldrb	r1, [r4, #0]
 800639e:	2203      	movs	r2, #3
 80063a0:	4650      	mov	r0, sl
 80063a2:	f7f9 ff25 	bl	80001f0 <memchr>
 80063a6:	b138      	cbz	r0, 80063b8 <_svfiprintf_r+0x150>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	eba0 000a 	sub.w	r0, r0, sl
 80063ae:	2240      	movs	r2, #64	@ 0x40
 80063b0:	4082      	lsls	r2, r0
 80063b2:	4313      	orrs	r3, r2
 80063b4:	3401      	adds	r4, #1
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063bc:	4824      	ldr	r0, [pc, #144]	@ (8006450 <_svfiprintf_r+0x1e8>)
 80063be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063c2:	2206      	movs	r2, #6
 80063c4:	f7f9 ff14 	bl	80001f0 <memchr>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d036      	beq.n	800643a <_svfiprintf_r+0x1d2>
 80063cc:	4b21      	ldr	r3, [pc, #132]	@ (8006454 <_svfiprintf_r+0x1ec>)
 80063ce:	bb1b      	cbnz	r3, 8006418 <_svfiprintf_r+0x1b0>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	3307      	adds	r3, #7
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	3308      	adds	r3, #8
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	4433      	add	r3, r6
 80063e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e2:	e76a      	b.n	80062ba <_svfiprintf_r+0x52>
 80063e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e8:	460c      	mov	r4, r1
 80063ea:	2001      	movs	r0, #1
 80063ec:	e7a8      	b.n	8006340 <_svfiprintf_r+0xd8>
 80063ee:	2300      	movs	r3, #0
 80063f0:	3401      	adds	r4, #1
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	4619      	mov	r1, r3
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	4620      	mov	r0, r4
 80063fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006400:	3a30      	subs	r2, #48	@ 0x30
 8006402:	2a09      	cmp	r2, #9
 8006404:	d903      	bls.n	800640e <_svfiprintf_r+0x1a6>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0c6      	beq.n	8006398 <_svfiprintf_r+0x130>
 800640a:	9105      	str	r1, [sp, #20]
 800640c:	e7c4      	b.n	8006398 <_svfiprintf_r+0x130>
 800640e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006412:	4604      	mov	r4, r0
 8006414:	2301      	movs	r3, #1
 8006416:	e7f0      	b.n	80063fa <_svfiprintf_r+0x192>
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	462a      	mov	r2, r5
 800641e:	4b0e      	ldr	r3, [pc, #56]	@ (8006458 <_svfiprintf_r+0x1f0>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	4638      	mov	r0, r7
 8006424:	f3af 8000 	nop.w
 8006428:	1c42      	adds	r2, r0, #1
 800642a:	4606      	mov	r6, r0
 800642c:	d1d6      	bne.n	80063dc <_svfiprintf_r+0x174>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	065b      	lsls	r3, r3, #25
 8006432:	f53f af2d 	bmi.w	8006290 <_svfiprintf_r+0x28>
 8006436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006438:	e72c      	b.n	8006294 <_svfiprintf_r+0x2c>
 800643a:	ab03      	add	r3, sp, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	462a      	mov	r2, r5
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <_svfiprintf_r+0x1f0>)
 8006442:	a904      	add	r1, sp, #16
 8006444:	4638      	mov	r0, r7
 8006446:	f000 f9bb 	bl	80067c0 <_printf_i>
 800644a:	e7ed      	b.n	8006428 <_svfiprintf_r+0x1c0>
 800644c:	08006e58 	.word	0x08006e58
 8006450:	08006e62 	.word	0x08006e62
 8006454:	00000000 	.word	0x00000000
 8006458:	080061b1 	.word	0x080061b1
 800645c:	08006e5e 	.word	0x08006e5e

08006460 <__sfputc_r>:
 8006460:	6893      	ldr	r3, [r2, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	b410      	push	{r4}
 8006468:	6093      	str	r3, [r2, #8]
 800646a:	da08      	bge.n	800647e <__sfputc_r+0x1e>
 800646c:	6994      	ldr	r4, [r2, #24]
 800646e:	42a3      	cmp	r3, r4
 8006470:	db01      	blt.n	8006476 <__sfputc_r+0x16>
 8006472:	290a      	cmp	r1, #10
 8006474:	d103      	bne.n	800647e <__sfputc_r+0x1e>
 8006476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647a:	f7ff bc90 	b.w	8005d9e <__swbuf_r>
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	1c58      	adds	r0, r3, #1
 8006482:	6010      	str	r0, [r2, #0]
 8006484:	7019      	strb	r1, [r3, #0]
 8006486:	4608      	mov	r0, r1
 8006488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648c:	4770      	bx	lr

0800648e <__sfputs_r>:
 800648e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	4614      	mov	r4, r2
 8006496:	18d5      	adds	r5, r2, r3
 8006498:	42ac      	cmp	r4, r5
 800649a:	d101      	bne.n	80064a0 <__sfputs_r+0x12>
 800649c:	2000      	movs	r0, #0
 800649e:	e007      	b.n	80064b0 <__sfputs_r+0x22>
 80064a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a4:	463a      	mov	r2, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffda 	bl	8006460 <__sfputc_r>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d1f3      	bne.n	8006498 <__sfputs_r+0xa>
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b4 <_vfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	460d      	mov	r5, r1
 80064ba:	b09d      	sub	sp, #116	@ 0x74
 80064bc:	4614      	mov	r4, r2
 80064be:	4698      	mov	r8, r3
 80064c0:	4606      	mov	r6, r0
 80064c2:	b118      	cbz	r0, 80064cc <_vfiprintf_r+0x18>
 80064c4:	6a03      	ldr	r3, [r0, #32]
 80064c6:	b90b      	cbnz	r3, 80064cc <_vfiprintf_r+0x18>
 80064c8:	f7ff fb4c 	bl	8005b64 <__sinit>
 80064cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x2a>
 80064d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064da:	f7ff fd6e 	bl	8005fba <__retarget_lock_acquire_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	071b      	lsls	r3, r3, #28
 80064e2:	d501      	bpl.n	80064e8 <_vfiprintf_r+0x34>
 80064e4:	692b      	ldr	r3, [r5, #16]
 80064e6:	b99b      	cbnz	r3, 8006510 <_vfiprintf_r+0x5c>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff fc96 	bl	8005e1c <__swsetup_r>
 80064f0:	b170      	cbz	r0, 8006510 <_vfiprintf_r+0x5c>
 80064f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f4:	07dc      	lsls	r4, r3, #31
 80064f6:	d504      	bpl.n	8006502 <_vfiprintf_r+0x4e>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	b01d      	add	sp, #116	@ 0x74
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	89ab      	ldrh	r3, [r5, #12]
 8006504:	0598      	lsls	r0, r3, #22
 8006506:	d4f7      	bmi.n	80064f8 <_vfiprintf_r+0x44>
 8006508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800650a:	f7ff fd57 	bl	8005fbc <__retarget_lock_release_recursive>
 800650e:	e7f3      	b.n	80064f8 <_vfiprintf_r+0x44>
 8006510:	2300      	movs	r3, #0
 8006512:	9309      	str	r3, [sp, #36]	@ 0x24
 8006514:	2320      	movs	r3, #32
 8006516:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800651a:	f8cd 800c 	str.w	r8, [sp, #12]
 800651e:	2330      	movs	r3, #48	@ 0x30
 8006520:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066d0 <_vfiprintf_r+0x21c>
 8006524:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006528:	f04f 0901 	mov.w	r9, #1
 800652c:	4623      	mov	r3, r4
 800652e:	469a      	mov	sl, r3
 8006530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006534:	b10a      	cbz	r2, 800653a <_vfiprintf_r+0x86>
 8006536:	2a25      	cmp	r2, #37	@ 0x25
 8006538:	d1f9      	bne.n	800652e <_vfiprintf_r+0x7a>
 800653a:	ebba 0b04 	subs.w	fp, sl, r4
 800653e:	d00b      	beq.n	8006558 <_vfiprintf_r+0xa4>
 8006540:	465b      	mov	r3, fp
 8006542:	4622      	mov	r2, r4
 8006544:	4629      	mov	r1, r5
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ffa1 	bl	800648e <__sfputs_r>
 800654c:	3001      	adds	r0, #1
 800654e:	f000 80a7 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 8006552:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006554:	445a      	add	r2, fp
 8006556:	9209      	str	r2, [sp, #36]	@ 0x24
 8006558:	f89a 3000 	ldrb.w	r3, [sl]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 809f 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 8006562:	2300      	movs	r3, #0
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656c:	f10a 0a01 	add.w	sl, sl, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	9307      	str	r3, [sp, #28]
 8006574:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006578:	931a      	str	r3, [sp, #104]	@ 0x68
 800657a:	4654      	mov	r4, sl
 800657c:	2205      	movs	r2, #5
 800657e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006582:	4853      	ldr	r0, [pc, #332]	@ (80066d0 <_vfiprintf_r+0x21c>)
 8006584:	f7f9 fe34 	bl	80001f0 <memchr>
 8006588:	9a04      	ldr	r2, [sp, #16]
 800658a:	b9d8      	cbnz	r0, 80065c4 <_vfiprintf_r+0x110>
 800658c:	06d1      	lsls	r1, r2, #27
 800658e:	bf44      	itt	mi
 8006590:	2320      	movmi	r3, #32
 8006592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006596:	0713      	lsls	r3, r2, #28
 8006598:	bf44      	itt	mi
 800659a:	232b      	movmi	r3, #43	@ 0x2b
 800659c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065a0:	f89a 3000 	ldrb.w	r3, [sl]
 80065a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a6:	d015      	beq.n	80065d4 <_vfiprintf_r+0x120>
 80065a8:	9a07      	ldr	r2, [sp, #28]
 80065aa:	4654      	mov	r4, sl
 80065ac:	2000      	movs	r0, #0
 80065ae:	f04f 0c0a 	mov.w	ip, #10
 80065b2:	4621      	mov	r1, r4
 80065b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b8:	3b30      	subs	r3, #48	@ 0x30
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d94b      	bls.n	8006656 <_vfiprintf_r+0x1a2>
 80065be:	b1b0      	cbz	r0, 80065ee <_vfiprintf_r+0x13a>
 80065c0:	9207      	str	r2, [sp, #28]
 80065c2:	e014      	b.n	80065ee <_vfiprintf_r+0x13a>
 80065c4:	eba0 0308 	sub.w	r3, r0, r8
 80065c8:	fa09 f303 	lsl.w	r3, r9, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	46a2      	mov	sl, r4
 80065d2:	e7d2      	b.n	800657a <_vfiprintf_r+0xc6>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1d19      	adds	r1, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	9103      	str	r1, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bfbb      	ittet	lt
 80065e0:	425b      	neglt	r3, r3
 80065e2:	f042 0202 	orrlt.w	r2, r2, #2
 80065e6:	9307      	strge	r3, [sp, #28]
 80065e8:	9307      	strlt	r3, [sp, #28]
 80065ea:	bfb8      	it	lt
 80065ec:	9204      	strlt	r2, [sp, #16]
 80065ee:	7823      	ldrb	r3, [r4, #0]
 80065f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80065f2:	d10a      	bne.n	800660a <_vfiprintf_r+0x156>
 80065f4:	7863      	ldrb	r3, [r4, #1]
 80065f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f8:	d132      	bne.n	8006660 <_vfiprintf_r+0x1ac>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	9203      	str	r2, [sp, #12]
 8006602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006606:	3402      	adds	r4, #2
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066e0 <_vfiprintf_r+0x22c>
 800660e:	7821      	ldrb	r1, [r4, #0]
 8006610:	2203      	movs	r2, #3
 8006612:	4650      	mov	r0, sl
 8006614:	f7f9 fdec 	bl	80001f0 <memchr>
 8006618:	b138      	cbz	r0, 800662a <_vfiprintf_r+0x176>
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	eba0 000a 	sub.w	r0, r0, sl
 8006620:	2240      	movs	r2, #64	@ 0x40
 8006622:	4082      	lsls	r2, r0
 8006624:	4313      	orrs	r3, r2
 8006626:	3401      	adds	r4, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662e:	4829      	ldr	r0, [pc, #164]	@ (80066d4 <_vfiprintf_r+0x220>)
 8006630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006634:	2206      	movs	r2, #6
 8006636:	f7f9 fddb 	bl	80001f0 <memchr>
 800663a:	2800      	cmp	r0, #0
 800663c:	d03f      	beq.n	80066be <_vfiprintf_r+0x20a>
 800663e:	4b26      	ldr	r3, [pc, #152]	@ (80066d8 <_vfiprintf_r+0x224>)
 8006640:	bb1b      	cbnz	r3, 800668a <_vfiprintf_r+0x1d6>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	3307      	adds	r3, #7
 8006646:	f023 0307 	bic.w	r3, r3, #7
 800664a:	3308      	adds	r3, #8
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006650:	443b      	add	r3, r7
 8006652:	9309      	str	r3, [sp, #36]	@ 0x24
 8006654:	e76a      	b.n	800652c <_vfiprintf_r+0x78>
 8006656:	fb0c 3202 	mla	r2, ip, r2, r3
 800665a:	460c      	mov	r4, r1
 800665c:	2001      	movs	r0, #1
 800665e:	e7a8      	b.n	80065b2 <_vfiprintf_r+0xfe>
 8006660:	2300      	movs	r3, #0
 8006662:	3401      	adds	r4, #1
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	4619      	mov	r1, r3
 8006668:	f04f 0c0a 	mov.w	ip, #10
 800666c:	4620      	mov	r0, r4
 800666e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006672:	3a30      	subs	r2, #48	@ 0x30
 8006674:	2a09      	cmp	r2, #9
 8006676:	d903      	bls.n	8006680 <_vfiprintf_r+0x1cc>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0c6      	beq.n	800660a <_vfiprintf_r+0x156>
 800667c:	9105      	str	r1, [sp, #20]
 800667e:	e7c4      	b.n	800660a <_vfiprintf_r+0x156>
 8006680:	fb0c 2101 	mla	r1, ip, r1, r2
 8006684:	4604      	mov	r4, r0
 8006686:	2301      	movs	r3, #1
 8006688:	e7f0      	b.n	800666c <_vfiprintf_r+0x1b8>
 800668a:	ab03      	add	r3, sp, #12
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	462a      	mov	r2, r5
 8006690:	4b12      	ldr	r3, [pc, #72]	@ (80066dc <_vfiprintf_r+0x228>)
 8006692:	a904      	add	r1, sp, #16
 8006694:	4630      	mov	r0, r6
 8006696:	f3af 8000 	nop.w
 800669a:	4607      	mov	r7, r0
 800669c:	1c78      	adds	r0, r7, #1
 800669e:	d1d6      	bne.n	800664e <_vfiprintf_r+0x19a>
 80066a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066a2:	07d9      	lsls	r1, r3, #31
 80066a4:	d405      	bmi.n	80066b2 <_vfiprintf_r+0x1fe>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	059a      	lsls	r2, r3, #22
 80066aa:	d402      	bmi.n	80066b2 <_vfiprintf_r+0x1fe>
 80066ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ae:	f7ff fc85 	bl	8005fbc <__retarget_lock_release_recursive>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	065b      	lsls	r3, r3, #25
 80066b6:	f53f af1f 	bmi.w	80064f8 <_vfiprintf_r+0x44>
 80066ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066bc:	e71e      	b.n	80064fc <_vfiprintf_r+0x48>
 80066be:	ab03      	add	r3, sp, #12
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	462a      	mov	r2, r5
 80066c4:	4b05      	ldr	r3, [pc, #20]	@ (80066dc <_vfiprintf_r+0x228>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4630      	mov	r0, r6
 80066ca:	f000 f879 	bl	80067c0 <_printf_i>
 80066ce:	e7e4      	b.n	800669a <_vfiprintf_r+0x1e6>
 80066d0:	08006e58 	.word	0x08006e58
 80066d4:	08006e62 	.word	0x08006e62
 80066d8:	00000000 	.word	0x00000000
 80066dc:	0800648f 	.word	0x0800648f
 80066e0:	08006e5e 	.word	0x08006e5e

080066e4 <_printf_common>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	4616      	mov	r6, r2
 80066ea:	4698      	mov	r8, r3
 80066ec:	688a      	ldr	r2, [r1, #8]
 80066ee:	690b      	ldr	r3, [r1, #16]
 80066f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bfb8      	it	lt
 80066f8:	4613      	movlt	r3, r2
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006700:	4607      	mov	r7, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b10a      	cbz	r2, 800670a <_printf_common+0x26>
 8006706:	3301      	adds	r3, #1
 8006708:	6033      	str	r3, [r6, #0]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	0699      	lsls	r1, r3, #26
 800670e:	bf42      	ittt	mi
 8006710:	6833      	ldrmi	r3, [r6, #0]
 8006712:	3302      	addmi	r3, #2
 8006714:	6033      	strmi	r3, [r6, #0]
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	f015 0506 	ands.w	r5, r5, #6
 800671c:	d106      	bne.n	800672c <_printf_common+0x48>
 800671e:	f104 0a19 	add.w	sl, r4, #25
 8006722:	68e3      	ldr	r3, [r4, #12]
 8006724:	6832      	ldr	r2, [r6, #0]
 8006726:	1a9b      	subs	r3, r3, r2
 8006728:	42ab      	cmp	r3, r5
 800672a:	dc26      	bgt.n	800677a <_printf_common+0x96>
 800672c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	3b00      	subs	r3, #0
 8006734:	bf18      	it	ne
 8006736:	2301      	movne	r3, #1
 8006738:	0692      	lsls	r2, r2, #26
 800673a:	d42b      	bmi.n	8006794 <_printf_common+0xb0>
 800673c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006740:	4641      	mov	r1, r8
 8006742:	4638      	mov	r0, r7
 8006744:	47c8      	blx	r9
 8006746:	3001      	adds	r0, #1
 8006748:	d01e      	beq.n	8006788 <_printf_common+0xa4>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	6922      	ldr	r2, [r4, #16]
 800674e:	f003 0306 	and.w	r3, r3, #6
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf02      	ittt	eq
 8006756:	68e5      	ldreq	r5, [r4, #12]
 8006758:	6833      	ldreq	r3, [r6, #0]
 800675a:	1aed      	subeq	r5, r5, r3
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	bf0c      	ite	eq
 8006760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006764:	2500      	movne	r5, #0
 8006766:	4293      	cmp	r3, r2
 8006768:	bfc4      	itt	gt
 800676a:	1a9b      	subgt	r3, r3, r2
 800676c:	18ed      	addgt	r5, r5, r3
 800676e:	2600      	movs	r6, #0
 8006770:	341a      	adds	r4, #26
 8006772:	42b5      	cmp	r5, r6
 8006774:	d11a      	bne.n	80067ac <_printf_common+0xc8>
 8006776:	2000      	movs	r0, #0
 8006778:	e008      	b.n	800678c <_printf_common+0xa8>
 800677a:	2301      	movs	r3, #1
 800677c:	4652      	mov	r2, sl
 800677e:	4641      	mov	r1, r8
 8006780:	4638      	mov	r0, r7
 8006782:	47c8      	blx	r9
 8006784:	3001      	adds	r0, #1
 8006786:	d103      	bne.n	8006790 <_printf_common+0xac>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	3501      	adds	r5, #1
 8006792:	e7c6      	b.n	8006722 <_printf_common+0x3e>
 8006794:	18e1      	adds	r1, r4, r3
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	2030      	movs	r0, #48	@ 0x30
 800679a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800679e:	4422      	add	r2, r4
 80067a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a8:	3302      	adds	r3, #2
 80067aa:	e7c7      	b.n	800673c <_printf_common+0x58>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4622      	mov	r2, r4
 80067b0:	4641      	mov	r1, r8
 80067b2:	4638      	mov	r0, r7
 80067b4:	47c8      	blx	r9
 80067b6:	3001      	adds	r0, #1
 80067b8:	d0e6      	beq.n	8006788 <_printf_common+0xa4>
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7d9      	b.n	8006772 <_printf_common+0x8e>
	...

080067c0 <_printf_i>:
 80067c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	7e0f      	ldrb	r7, [r1, #24]
 80067c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c8:	2f78      	cmp	r7, #120	@ 0x78
 80067ca:	4691      	mov	r9, r2
 80067cc:	4680      	mov	r8, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	469a      	mov	sl, r3
 80067d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067d6:	d807      	bhi.n	80067e8 <_printf_i+0x28>
 80067d8:	2f62      	cmp	r7, #98	@ 0x62
 80067da:	d80a      	bhi.n	80067f2 <_printf_i+0x32>
 80067dc:	2f00      	cmp	r7, #0
 80067de:	f000 80d2 	beq.w	8006986 <_printf_i+0x1c6>
 80067e2:	2f58      	cmp	r7, #88	@ 0x58
 80067e4:	f000 80b9 	beq.w	800695a <_printf_i+0x19a>
 80067e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067f0:	e03a      	b.n	8006868 <_printf_i+0xa8>
 80067f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067f6:	2b15      	cmp	r3, #21
 80067f8:	d8f6      	bhi.n	80067e8 <_printf_i+0x28>
 80067fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006800 <_printf_i+0x40>)
 80067fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006800:	08006859 	.word	0x08006859
 8006804:	0800686d 	.word	0x0800686d
 8006808:	080067e9 	.word	0x080067e9
 800680c:	080067e9 	.word	0x080067e9
 8006810:	080067e9 	.word	0x080067e9
 8006814:	080067e9 	.word	0x080067e9
 8006818:	0800686d 	.word	0x0800686d
 800681c:	080067e9 	.word	0x080067e9
 8006820:	080067e9 	.word	0x080067e9
 8006824:	080067e9 	.word	0x080067e9
 8006828:	080067e9 	.word	0x080067e9
 800682c:	0800696d 	.word	0x0800696d
 8006830:	08006897 	.word	0x08006897
 8006834:	08006927 	.word	0x08006927
 8006838:	080067e9 	.word	0x080067e9
 800683c:	080067e9 	.word	0x080067e9
 8006840:	0800698f 	.word	0x0800698f
 8006844:	080067e9 	.word	0x080067e9
 8006848:	08006897 	.word	0x08006897
 800684c:	080067e9 	.word	0x080067e9
 8006850:	080067e9 	.word	0x080067e9
 8006854:	0800692f 	.word	0x0800692f
 8006858:	6833      	ldr	r3, [r6, #0]
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6032      	str	r2, [r6, #0]
 8006860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006868:	2301      	movs	r3, #1
 800686a:	e09d      	b.n	80069a8 <_printf_i+0x1e8>
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1d19      	adds	r1, r3, #4
 8006872:	6031      	str	r1, [r6, #0]
 8006874:	0606      	lsls	r6, r0, #24
 8006876:	d501      	bpl.n	800687c <_printf_i+0xbc>
 8006878:	681d      	ldr	r5, [r3, #0]
 800687a:	e003      	b.n	8006884 <_printf_i+0xc4>
 800687c:	0645      	lsls	r5, r0, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0xb8>
 8006880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006884:	2d00      	cmp	r5, #0
 8006886:	da03      	bge.n	8006890 <_printf_i+0xd0>
 8006888:	232d      	movs	r3, #45	@ 0x2d
 800688a:	426d      	negs	r5, r5
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006890:	4859      	ldr	r0, [pc, #356]	@ (80069f8 <_printf_i+0x238>)
 8006892:	230a      	movs	r3, #10
 8006894:	e011      	b.n	80068ba <_printf_i+0xfa>
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	0608      	lsls	r0, r1, #24
 800689c:	f853 5b04 	ldr.w	r5, [r3], #4
 80068a0:	d402      	bmi.n	80068a8 <_printf_i+0xe8>
 80068a2:	0649      	lsls	r1, r1, #25
 80068a4:	bf48      	it	mi
 80068a6:	b2ad      	uxthmi	r5, r5
 80068a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80068aa:	4853      	ldr	r0, [pc, #332]	@ (80069f8 <_printf_i+0x238>)
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	bf14      	ite	ne
 80068b0:	230a      	movne	r3, #10
 80068b2:	2308      	moveq	r3, #8
 80068b4:	2100      	movs	r1, #0
 80068b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ba:	6866      	ldr	r6, [r4, #4]
 80068bc:	60a6      	str	r6, [r4, #8]
 80068be:	2e00      	cmp	r6, #0
 80068c0:	bfa2      	ittt	ge
 80068c2:	6821      	ldrge	r1, [r4, #0]
 80068c4:	f021 0104 	bicge.w	r1, r1, #4
 80068c8:	6021      	strge	r1, [r4, #0]
 80068ca:	b90d      	cbnz	r5, 80068d0 <_printf_i+0x110>
 80068cc:	2e00      	cmp	r6, #0
 80068ce:	d04b      	beq.n	8006968 <_printf_i+0x1a8>
 80068d0:	4616      	mov	r6, r2
 80068d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d6:	fb03 5711 	mls	r7, r3, r1, r5
 80068da:	5dc7      	ldrb	r7, [r0, r7]
 80068dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068e0:	462f      	mov	r7, r5
 80068e2:	42bb      	cmp	r3, r7
 80068e4:	460d      	mov	r5, r1
 80068e6:	d9f4      	bls.n	80068d2 <_printf_i+0x112>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d10b      	bne.n	8006904 <_printf_i+0x144>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07df      	lsls	r7, r3, #31
 80068f0:	d508      	bpl.n	8006904 <_printf_i+0x144>
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	6861      	ldr	r1, [r4, #4]
 80068f6:	4299      	cmp	r1, r3
 80068f8:	bfde      	ittt	le
 80068fa:	2330      	movle	r3, #48	@ 0x30
 80068fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006900:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006904:	1b92      	subs	r2, r2, r6
 8006906:	6122      	str	r2, [r4, #16]
 8006908:	f8cd a000 	str.w	sl, [sp]
 800690c:	464b      	mov	r3, r9
 800690e:	aa03      	add	r2, sp, #12
 8006910:	4621      	mov	r1, r4
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff fee6 	bl	80066e4 <_printf_common>
 8006918:	3001      	adds	r0, #1
 800691a:	d14a      	bne.n	80069b2 <_printf_i+0x1f2>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	b004      	add	sp, #16
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	f043 0320 	orr.w	r3, r3, #32
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	4833      	ldr	r0, [pc, #204]	@ (80069fc <_printf_i+0x23c>)
 8006930:	2778      	movs	r7, #120	@ 0x78
 8006932:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	6831      	ldr	r1, [r6, #0]
 800693a:	061f      	lsls	r7, r3, #24
 800693c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006940:	d402      	bmi.n	8006948 <_printf_i+0x188>
 8006942:	065f      	lsls	r7, r3, #25
 8006944:	bf48      	it	mi
 8006946:	b2ad      	uxthmi	r5, r5
 8006948:	6031      	str	r1, [r6, #0]
 800694a:	07d9      	lsls	r1, r3, #31
 800694c:	bf44      	itt	mi
 800694e:	f043 0320 	orrmi.w	r3, r3, #32
 8006952:	6023      	strmi	r3, [r4, #0]
 8006954:	b11d      	cbz	r5, 800695e <_printf_i+0x19e>
 8006956:	2310      	movs	r3, #16
 8006958:	e7ac      	b.n	80068b4 <_printf_i+0xf4>
 800695a:	4827      	ldr	r0, [pc, #156]	@ (80069f8 <_printf_i+0x238>)
 800695c:	e7e9      	b.n	8006932 <_printf_i+0x172>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f023 0320 	bic.w	r3, r3, #32
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	e7f6      	b.n	8006956 <_printf_i+0x196>
 8006968:	4616      	mov	r6, r2
 800696a:	e7bd      	b.n	80068e8 <_printf_i+0x128>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	6961      	ldr	r1, [r4, #20]
 8006972:	1d18      	adds	r0, r3, #4
 8006974:	6030      	str	r0, [r6, #0]
 8006976:	062e      	lsls	r6, r5, #24
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	d501      	bpl.n	8006980 <_printf_i+0x1c0>
 800697c:	6019      	str	r1, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0x1c6>
 8006980:	0668      	lsls	r0, r5, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0x1bc>
 8006984:	8019      	strh	r1, [r3, #0]
 8006986:	2300      	movs	r3, #0
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	4616      	mov	r6, r2
 800698c:	e7bc      	b.n	8006908 <_printf_i+0x148>
 800698e:	6833      	ldr	r3, [r6, #0]
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	6032      	str	r2, [r6, #0]
 8006994:	681e      	ldr	r6, [r3, #0]
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	2100      	movs	r1, #0
 800699a:	4630      	mov	r0, r6
 800699c:	f7f9 fc28 	bl	80001f0 <memchr>
 80069a0:	b108      	cbz	r0, 80069a6 <_printf_i+0x1e6>
 80069a2:	1b80      	subs	r0, r0, r6
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	6863      	ldr	r3, [r4, #4]
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	2300      	movs	r3, #0
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b0:	e7aa      	b.n	8006908 <_printf_i+0x148>
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	4632      	mov	r2, r6
 80069b6:	4649      	mov	r1, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	47d0      	blx	sl
 80069bc:	3001      	adds	r0, #1
 80069be:	d0ad      	beq.n	800691c <_printf_i+0x15c>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	079b      	lsls	r3, r3, #30
 80069c4:	d413      	bmi.n	80069ee <_printf_i+0x22e>
 80069c6:	68e0      	ldr	r0, [r4, #12]
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	4298      	cmp	r0, r3
 80069cc:	bfb8      	it	lt
 80069ce:	4618      	movlt	r0, r3
 80069d0:	e7a6      	b.n	8006920 <_printf_i+0x160>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4632      	mov	r2, r6
 80069d6:	4649      	mov	r1, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	47d0      	blx	sl
 80069dc:	3001      	adds	r0, #1
 80069de:	d09d      	beq.n	800691c <_printf_i+0x15c>
 80069e0:	3501      	adds	r5, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dcf2      	bgt.n	80069d2 <_printf_i+0x212>
 80069ec:	e7eb      	b.n	80069c6 <_printf_i+0x206>
 80069ee:	2500      	movs	r5, #0
 80069f0:	f104 0619 	add.w	r6, r4, #25
 80069f4:	e7f5      	b.n	80069e2 <_printf_i+0x222>
 80069f6:	bf00      	nop
 80069f8:	08006e69 	.word	0x08006e69
 80069fc:	08006e7a 	.word	0x08006e7a

08006a00 <__sflush_r>:
 8006a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a08:	0716      	lsls	r6, r2, #28
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	d454      	bmi.n	8006aba <__sflush_r+0xba>
 8006a10:	684b      	ldr	r3, [r1, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc02      	bgt.n	8006a1c <__sflush_r+0x1c>
 8006a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dd48      	ble.n	8006aae <__sflush_r+0xae>
 8006a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	d045      	beq.n	8006aae <__sflush_r+0xae>
 8006a22:	2300      	movs	r3, #0
 8006a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a28:	682f      	ldr	r7, [r5, #0]
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	602b      	str	r3, [r5, #0]
 8006a2e:	d030      	beq.n	8006a92 <__sflush_r+0x92>
 8006a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0759      	lsls	r1, r3, #29
 8006a36:	d505      	bpl.n	8006a44 <__sflush_r+0x44>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a3e:	b10b      	cbz	r3, 8006a44 <__sflush_r+0x44>
 8006a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a48:	6a21      	ldr	r1, [r4, #32]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b0      	blx	r6
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	d106      	bne.n	8006a62 <__sflush_r+0x62>
 8006a54:	6829      	ldr	r1, [r5, #0]
 8006a56:	291d      	cmp	r1, #29
 8006a58:	d82b      	bhi.n	8006ab2 <__sflush_r+0xb2>
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <__sflush_r+0x104>)
 8006a5c:	410a      	asrs	r2, r1
 8006a5e:	07d6      	lsls	r6, r2, #31
 8006a60:	d427      	bmi.n	8006ab2 <__sflush_r+0xb2>
 8006a62:	2200      	movs	r2, #0
 8006a64:	6062      	str	r2, [r4, #4]
 8006a66:	04d9      	lsls	r1, r3, #19
 8006a68:	6922      	ldr	r2, [r4, #16]
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	d504      	bpl.n	8006a78 <__sflush_r+0x78>
 8006a6e:	1c42      	adds	r2, r0, #1
 8006a70:	d101      	bne.n	8006a76 <__sflush_r+0x76>
 8006a72:	682b      	ldr	r3, [r5, #0]
 8006a74:	b903      	cbnz	r3, 8006a78 <__sflush_r+0x78>
 8006a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7a:	602f      	str	r7, [r5, #0]
 8006a7c:	b1b9      	cbz	r1, 8006aae <__sflush_r+0xae>
 8006a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a82:	4299      	cmp	r1, r3
 8006a84:	d002      	beq.n	8006a8c <__sflush_r+0x8c>
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7ff fa9a 	bl	8005fc0 <_free_r>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a90:	e00d      	b.n	8006aae <__sflush_r+0xae>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	4602      	mov	r2, r0
 8006a9a:	1c50      	adds	r0, r2, #1
 8006a9c:	d1c9      	bne.n	8006a32 <__sflush_r+0x32>
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0c6      	beq.n	8006a32 <__sflush_r+0x32>
 8006aa4:	2b1d      	cmp	r3, #29
 8006aa6:	d001      	beq.n	8006aac <__sflush_r+0xac>
 8006aa8:	2b16      	cmp	r3, #22
 8006aaa:	d11e      	bne.n	8006aea <__sflush_r+0xea>
 8006aac:	602f      	str	r7, [r5, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	e022      	b.n	8006af8 <__sflush_r+0xf8>
 8006ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	e01b      	b.n	8006af2 <__sflush_r+0xf2>
 8006aba:	690f      	ldr	r7, [r1, #16]
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d0f6      	beq.n	8006aae <__sflush_r+0xae>
 8006ac0:	0793      	lsls	r3, r2, #30
 8006ac2:	680e      	ldr	r6, [r1, #0]
 8006ac4:	bf08      	it	eq
 8006ac6:	694b      	ldreq	r3, [r1, #20]
 8006ac8:	600f      	str	r7, [r1, #0]
 8006aca:	bf18      	it	ne
 8006acc:	2300      	movne	r3, #0
 8006ace:	eba6 0807 	sub.w	r8, r6, r7
 8006ad2:	608b      	str	r3, [r1, #8]
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	dde9      	ble.n	8006aae <__sflush_r+0xae>
 8006ada:	6a21      	ldr	r1, [r4, #32]
 8006adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ade:	4643      	mov	r3, r8
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	47b0      	blx	r6
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc08      	bgt.n	8006afc <__sflush_r+0xfc>
 8006aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	4407      	add	r7, r0
 8006afe:	eba8 0800 	sub.w	r8, r8, r0
 8006b02:	e7e7      	b.n	8006ad4 <__sflush_r+0xd4>
 8006b04:	dfbffffe 	.word	0xdfbffffe

08006b08 <_fflush_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	690b      	ldr	r3, [r1, #16]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b913      	cbnz	r3, 8006b18 <_fflush_r+0x10>
 8006b12:	2500      	movs	r5, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	b118      	cbz	r0, 8006b22 <_fflush_r+0x1a>
 8006b1a:	6a03      	ldr	r3, [r0, #32]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <_fflush_r+0x1a>
 8006b1e:	f7ff f821 	bl	8005b64 <__sinit>
 8006b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f3      	beq.n	8006b12 <_fflush_r+0xa>
 8006b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b2c:	07d0      	lsls	r0, r2, #31
 8006b2e:	d404      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b30:	0599      	lsls	r1, r3, #22
 8006b32:	d402      	bmi.n	8006b3a <_fflush_r+0x32>
 8006b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b36:	f7ff fa40 	bl	8005fba <__retarget_lock_acquire_recursive>
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	f7ff ff5f 	bl	8006a00 <__sflush_r>
 8006b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b44:	07da      	lsls	r2, r3, #31
 8006b46:	4605      	mov	r5, r0
 8006b48:	d4e4      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	059b      	lsls	r3, r3, #22
 8006b4e:	d4e1      	bmi.n	8006b14 <_fflush_r+0xc>
 8006b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b52:	f7ff fa33 	bl	8005fbc <__retarget_lock_release_recursive>
 8006b56:	e7dd      	b.n	8006b14 <_fflush_r+0xc>

08006b58 <__swhatbuf_r>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	b096      	sub	sp, #88	@ 0x58
 8006b64:	4615      	mov	r5, r2
 8006b66:	461e      	mov	r6, r3
 8006b68:	da0d      	bge.n	8006b86 <__swhatbuf_r+0x2e>
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	bf14      	ite	ne
 8006b76:	2340      	movne	r3, #64	@ 0x40
 8006b78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	6031      	str	r1, [r6, #0]
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	b016      	add	sp, #88	@ 0x58
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	466a      	mov	r2, sp
 8006b88:	f000 f862 	bl	8006c50 <_fstat_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	dbec      	blt.n	8006b6a <__swhatbuf_r+0x12>
 8006b90:	9901      	ldr	r1, [sp, #4]
 8006b92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b9a:	4259      	negs	r1, r3
 8006b9c:	4159      	adcs	r1, r3
 8006b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba2:	e7eb      	b.n	8006b7c <__swhatbuf_r+0x24>

08006ba4 <__smakebuf_r>:
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba8:	079d      	lsls	r5, r3, #30
 8006baa:	4606      	mov	r6, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	d507      	bpl.n	8006bc0 <__smakebuf_r+0x1c>
 8006bb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	6163      	str	r3, [r4, #20]
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc0:	ab01      	add	r3, sp, #4
 8006bc2:	466a      	mov	r2, sp
 8006bc4:	f7ff ffc8 	bl	8006b58 <__swhatbuf_r>
 8006bc8:	9f00      	ldr	r7, [sp, #0]
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4639      	mov	r1, r7
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff fa62 	bl	8006098 <_malloc_r>
 8006bd4:	b948      	cbnz	r0, 8006bea <__smakebuf_r+0x46>
 8006bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bda:	059a      	lsls	r2, r3, #22
 8006bdc:	d4ee      	bmi.n	8006bbc <__smakebuf_r+0x18>
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	f043 0302 	orr.w	r3, r3, #2
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	e7e2      	b.n	8006bb0 <__smakebuf_r+0xc>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	6020      	str	r0, [r4, #0]
 8006bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bfa:	b15b      	cbz	r3, 8006c14 <__smakebuf_r+0x70>
 8006bfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f837 	bl	8006c74 <_isatty_r>
 8006c06:	b128      	cbz	r0, 8006c14 <__smakebuf_r+0x70>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	431d      	orrs	r5, r3
 8006c18:	81a5      	strh	r5, [r4, #12]
 8006c1a:	e7cf      	b.n	8006bbc <__smakebuf_r+0x18>

08006c1c <memmove>:
 8006c1c:	4288      	cmp	r0, r1
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	eb01 0402 	add.w	r4, r1, r2
 8006c24:	d902      	bls.n	8006c2c <memmove+0x10>
 8006c26:	4284      	cmp	r4, r0
 8006c28:	4623      	mov	r3, r4
 8006c2a:	d807      	bhi.n	8006c3c <memmove+0x20>
 8006c2c:	1e43      	subs	r3, r0, #1
 8006c2e:	42a1      	cmp	r1, r4
 8006c30:	d008      	beq.n	8006c44 <memmove+0x28>
 8006c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c3a:	e7f8      	b.n	8006c2e <memmove+0x12>
 8006c3c:	4402      	add	r2, r0
 8006c3e:	4601      	mov	r1, r0
 8006c40:	428a      	cmp	r2, r1
 8006c42:	d100      	bne.n	8006c46 <memmove+0x2a>
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c4e:	e7f7      	b.n	8006c40 <memmove+0x24>

08006c50 <_fstat_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d07      	ldr	r5, [pc, #28]	@ (8006c70 <_fstat_r+0x20>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	602b      	str	r3, [r5, #0]
 8006c5e:	f7fa fc64 	bl	800152a <_fstat>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d102      	bne.n	8006c6c <_fstat_r+0x1c>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	b103      	cbz	r3, 8006c6c <_fstat_r+0x1c>
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	bd38      	pop	{r3, r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	200003f4 	.word	0x200003f4

08006c74 <_isatty_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d06      	ldr	r5, [pc, #24]	@ (8006c90 <_isatty_r+0x1c>)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fa fc63 	bl	800154a <_isatty>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_isatty_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_isatty_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	200003f4 	.word	0x200003f4

08006c94 <_sbrk_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d06      	ldr	r5, [pc, #24]	@ (8006cb0 <_sbrk_r+0x1c>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	602b      	str	r3, [r5, #0]
 8006ca0:	f7fa fc6c 	bl	800157c <_sbrk>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_sbrk_r+0x1a>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_sbrk_r+0x1a>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	200003f4 	.word	0x200003f4

08006cb4 <memcpy>:
 8006cb4:	440a      	add	r2, r1
 8006cb6:	4291      	cmp	r1, r2
 8006cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cbc:	d100      	bne.n	8006cc0 <memcpy+0xc>
 8006cbe:	4770      	bx	lr
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cca:	4291      	cmp	r1, r2
 8006ccc:	d1f9      	bne.n	8006cc2 <memcpy+0xe>
 8006cce:	bd10      	pop	{r4, pc}

08006cd0 <_realloc_r>:
 8006cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	4615      	mov	r5, r2
 8006cd8:	460c      	mov	r4, r1
 8006cda:	b921      	cbnz	r1, 8006ce6 <_realloc_r+0x16>
 8006cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	f7ff b9d9 	b.w	8006098 <_malloc_r>
 8006ce6:	b92a      	cbnz	r2, 8006cf4 <_realloc_r+0x24>
 8006ce8:	f7ff f96a 	bl	8005fc0 <_free_r>
 8006cec:	2400      	movs	r4, #0
 8006cee:	4620      	mov	r0, r4
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf4:	f000 f81a 	bl	8006d2c <_malloc_usable_size_r>
 8006cf8:	4285      	cmp	r5, r0
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	d802      	bhi.n	8006d04 <_realloc_r+0x34>
 8006cfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d02:	d8f4      	bhi.n	8006cee <_realloc_r+0x1e>
 8006d04:	4629      	mov	r1, r5
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff f9c6 	bl	8006098 <_malloc_r>
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d0ec      	beq.n	8006cec <_realloc_r+0x1c>
 8006d12:	42b5      	cmp	r5, r6
 8006d14:	462a      	mov	r2, r5
 8006d16:	4621      	mov	r1, r4
 8006d18:	bf28      	it	cs
 8006d1a:	4632      	movcs	r2, r6
 8006d1c:	f7ff ffca 	bl	8006cb4 <memcpy>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7ff f94c 	bl	8005fc0 <_free_r>
 8006d28:	463c      	mov	r4, r7
 8006d2a:	e7e0      	b.n	8006cee <_realloc_r+0x1e>

08006d2c <_malloc_usable_size_r>:
 8006d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d30:	1f18      	subs	r0, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bfbc      	itt	lt
 8006d36:	580b      	ldrlt	r3, [r1, r0]
 8006d38:	18c0      	addlt	r0, r0, r3
 8006d3a:	4770      	bx	lr

08006d3c <_init>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	bf00      	nop
 8006d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d42:	bc08      	pop	{r3}
 8006d44:	469e      	mov	lr, r3
 8006d46:	4770      	bx	lr

08006d48 <_fini>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr
